syntax = "proto3";

package ariand.v1;

import "ariand/v1/user.proto";

option go_package = "ariand/gen/go/ariand/v1;ariandv1";

// User management service
service UserService {
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc GetUserByEmail(GetUserByEmailRequest) returns (GetUserByEmailResponse);
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
}

message GetUserRequest {
  string id = 1; // UUID
}

message GetUserResponse {
  User user = 1;
}

message GetUserByEmailRequest {
  string email = 1;
}

message GetUserByEmailResponse {
  User user = 1;
}

message CreateUserRequest {
  string email = 1;
  optional string display_name = 2;
}

message CreateUserResponse {
  User user = 1;
}

message UpdateUserRequest {
  string id = 1; // UUID
  optional string email = 2;
  optional string display_name = 3;
}

message UpdateUserResponse {
  User user = 1;
}

message DeleteUserRequest {
  string id = 1; // UUID
}

message DeleteUserResponse {}

// WebAuthn credential management service
service CredentialService {
  rpc ListCredentials(ListCredentialsRequest) returns (ListCredentialsResponse);
  rpc GetCredential(GetCredentialRequest) returns (GetCredentialResponse);
  rpc CreateCredential(CreateCredentialRequest) returns (CreateCredentialResponse);
  rpc UpdateCredentialSignCount(UpdateCredentialSignCountRequest) returns (UpdateCredentialSignCountResponse);
  rpc DeleteCredential(DeleteCredentialRequest) returns (DeleteCredentialResponse);
}

message ListCredentialsRequest {
  string user_id = 1; // UUID
}

message ListCredentialsResponse {
  repeated UserCredential credentials = 1;
}

message GetCredentialRequest {
  string id = 1; // UUID
  string user_id = 2; // UUID
}

message GetCredentialResponse {
  UserCredential credential = 1;
}

message CreateCredentialRequest {
  string user_id = 1; // UUID
  bytes credential_id = 2;
  bytes public_key = 3;
  int64 sign_count = 4;
}

message CreateCredentialResponse {
  UserCredential credential = 1;
}

message UpdateCredentialSignCountRequest {
  bytes credential_id = 1;
  int64 sign_count = 2;
}

message UpdateCredentialSignCountResponse {}

message DeleteCredentialRequest {
  string id = 1; // UUID
  string user_id = 2; // UUID
}

message DeleteCredentialResponse {}