syntax = "proto3";

package ariand.v1;

import "ariand/v1/core.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/type/money.proto";

option go_package = "ariand/gen/go/ariand/v1;ariandv1";

// ----- transaction service ----------

service TransactionService {
  rpc ListTransactions(ListTransactionsRequest) returns (ListTransactionsResponse);
  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse);
  rpc CreateTransaction(CreateTransactionRequest) returns (CreateTransactionResponse);
  rpc UpdateTransaction(UpdateTransactionRequest) returns (UpdateTransactionResponse);
  rpc DeleteTransaction(DeleteTransactionRequest) returns (DeleteTransactionResponse);
  rpc CategorizeTransaction(CategorizeTransactionRequest) returns (CategorizeTransactionResponse);
  rpc IdentifyMerchant(IdentifyMerchantRequest) returns (IdentifyMerchantResponse);
}

message ListTransactionsRequest {
  int32 limit = 1;
  optional Cursor cursor = 2;
  optional google.protobuf.Timestamp start_date = 3;
  optional google.protobuf.Timestamp end_date = 4;
  repeated int64 account_ids = 5;
  repeated string category_slugs = 6;
  optional TransactionDirection direction = 7;
  optional string merchant_search = 8;
  optional string description_search = 9;
  optional double amount_min = 10;
  optional double amount_max = 11;
  optional string currency = 12;
}

message ListTransactionsResponse {
  repeated Transaction transactions = 1;
  optional Cursor next_cursor = 2;
}

message GetTransactionRequest {
  int64 id = 1;
}

message GetTransactionResponse {
  Transaction transaction = 1;
}

message CreateTransactionRequest {
  int64 account_id = 1;
  google.protobuf.Timestamp tx_date = 2;
  google.type.Money tx_amount = 3;
  TransactionDirection direction = 4;
  optional string email_id = 5;
  optional string description = 6;
  optional int64 category_id = 7;
  optional string merchant = 8;
  optional string user_notes = 9;
  repeated string suggestions = 10;
  optional google.type.Money foreign_amount = 11;
  optional double exchange_rate = 12;
}

message CreateTransactionResponse {
  int64 id = 1;
}

message UpdateTransactionRequest {
  int64 id = 1;
  Transaction transaction = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateTransactionResponse {
  Transaction transaction = 1;
}

message DeleteTransactionRequest {
  int64 id = 1;
}

message DeleteTransactionResponse {}

message CategorizeTransactionRequest {
  int64 id = 1;
}

message CategorizeTransactionResponse {
  Transaction transaction = 1;
}

message IdentifyMerchantRequest {
  int64 id = 1;
}

message IdentifyMerchantResponse {
  Transaction transaction = 1;
}

// ----- account service ----------

service AccountService {
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse);
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse);
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse);
  rpc UpdateAccount(UpdateAccountRequest) returns (UpdateAccountResponse);
  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse);
  rpc SetAccountAnchor(SetAccountAnchorRequest) returns (SetAccountAnchorResponse);
  rpc GetAccountBalance(GetAccountBalanceRequest) returns (GetAccountBalanceResponse);
}

message ListAccountsRequest {}

message ListAccountsResponse {
  repeated Account accounts = 1;
}

message GetAccountRequest {
  int64 id = 1;
}

message GetAccountResponse {
  Account account = 1;
}

message CreateAccountRequest {
  string name = 1;
  string bank = 2;
  AccountType type = 3;
  optional string alias = 4;
  google.type.Money anchor_balance = 5;
}

message CreateAccountResponse {
  Account account = 1;
}

message UpdateAccountRequest {
  int64 id = 1;
  Account account = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateAccountResponse {
  Account account = 1;
}

message DeleteAccountRequest {
  int64 id = 1;
}

message DeleteAccountResponse {}

message SetAccountAnchorRequest {
  int64 id = 1;
  google.type.Money balance = 2;
}

message SetAccountAnchorResponse {
  Account account = 1;
}

message GetAccountBalanceRequest {
  int64 id = 1;
}

message GetAccountBalanceResponse {
  google.type.Money balance = 1;
}

// ----- category service ----------

service CategoryService {
  rpc ListCategories(ListCategoriesRequest) returns (ListCategoriesResponse);
  rpc GetCategory(GetCategoryRequest) returns (GetCategoryResponse);
  rpc CreateCategory(CreateCategoryRequest) returns (CreateCategoryResponse);
  rpc UpdateCategory(UpdateCategoryRequest) returns (UpdateCategoryResponse);
  rpc DeleteCategory(DeleteCategoryRequest) returns (DeleteCategoryResponse);
}

message ListCategoriesRequest {}

message ListCategoriesResponse {
  repeated Category categories = 1;
}

message GetCategoryRequest {
  int64 id = 1;
}

message GetCategoryResponse {
  Category category = 1;
}

message CreateCategoryRequest {
  string slug = 1;
  string label = 2;
  string color = 3;
}

message CreateCategoryResponse {
  Category category = 1;
}

message UpdateCategoryRequest {
  int64 id = 1;
  Category category = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateCategoryResponse {
  Category category = 1;
}

message DeleteCategoryRequest {
  int64 id = 1;
}

message DeleteCategoryResponse {}

// ----- dashboard service ----------

service DashboardService {
  rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse);
  rpc GetDebt(GetDebtRequest) returns (GetDebtResponse);
  rpc GetTrends(GetTrendsRequest) returns (GetTrendsResponse);
}

message GetBalanceRequest {}

message GetBalanceResponse {
  google.type.Money balance = 1;
}

message GetDebtRequest {}

message GetDebtResponse {
  google.type.Money debt = 1;
}

message GetTrendsRequest {
  optional google.protobuf.Timestamp start_date = 1;
  optional google.protobuf.Timestamp end_date = 2;
}

message GetTrendsResponse {
  repeated TrendPoint trend_points = 1;
}

// ----- receipt service ----------

service ReceiptService {
  rpc UploadReceipt(stream UploadReceiptRequest) returns (UploadReceiptResponse);
  rpc MatchReceipt(stream MatchReceiptRequest) returns (MatchReceiptResponse);
}

message UploadReceiptRequest {
  oneof data {
    UploadReceiptInfo info = 1;
    bytes chunk = 2;
  }
}

message UploadReceiptInfo {
  int64 transaction_id = 1;
  string filename = 2;
  ReceiptEngine engine = 3;
}

message UploadReceiptResponse {
  Receipt receipt = 1;
}

message MatchReceiptRequest {
  oneof data {
    MatchReceiptInfo info = 1;
    bytes chunk = 2;
  }
}

message MatchReceiptInfo {
  string filename = 1;
  ReceiptEngine engine = 2;
}

message MatchReceiptResponse {
  Receipt receipt = 1;
}
