// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dashboard.sql

package sqlc

import (
	"context"
	"time"

	arian "ariand/internal/gen/arian/v1"
	"github.com/google/uuid"
)

const getAccountBalances = `-- name: GetAccountBalances :many
SELECT
  a.id,
  a.name,
  a.account_type,
  jsonb_build_object(
    'currency_code', a.anchor_balance->>'currency_code',
    'units', ((a.anchor_balance->>'units')::bigint + COALESCE(d.delta, 0))::bigint,
    'nanos', 0
  ) AS current_balance
FROM accounts a
LEFT JOIN account_users au ON a.id = au.account_id AND au.user_id = $1::uuid
LEFT JOIN LATERAL (
  SELECT SUM(
    CASE
      WHEN t.tx_direction = 1 THEN (t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0
      WHEN t.tx_direction = 2 THEN -((t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0)
    END
  ) AS delta
  FROM transactions t
  WHERE t.account_id = a.id
    AND t.tx_date > a.anchor_date
) d ON TRUE
WHERE (a.owner_id = $1::uuid OR au.user_id IS NOT NULL)
ORDER BY current_balance DESC
`

type GetAccountBalancesRow struct {
	ID             int64             `json:"id"`
	Name           string            `json:"name"`
	AccountType    arian.AccountType `json:"account_type"`
	CurrentBalance []byte            `json:"current_balance"`
}

func (q *Queries) GetAccountBalances(ctx context.Context, userID uuid.UUID) ([]GetAccountBalancesRow, error) {
	rows, err := q.db.Query(ctx, getAccountBalances, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountBalancesRow
	for rows.Next() {
		var i GetAccountBalancesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AccountType,
			&i.CurrentBalance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDashboardSummary = `-- name: GetDashboardSummary :one
SELECT
  COUNT(DISTINCT a.id) AS total_accounts,
  COUNT(t.id) AS total_transactions,
  COALESCE(SUM(CASE WHEN t.tx_direction = 1 THEN (t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0 ELSE 0 END), 0) AS total_income,
  COALESCE(SUM(CASE WHEN t.tx_direction = 2 THEN (t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0 ELSE 0 END), 0) AS total_expenses,
  COUNT(DISTINCT CASE WHEN t.tx_date >= CURRENT_DATE - INTERVAL '30 days' THEN t.id END) AS transactions_last_30_days,
  COUNT(DISTINCT CASE WHEN t.category_id IS NULL THEN t.id END) AS uncategorized_transactions
FROM accounts a
LEFT JOIN account_users au ON a.id = au.account_id AND au.user_id = $1::uuid
LEFT JOIN transactions t ON a.id = t.account_id
WHERE (a.owner_id = $1::uuid OR au.user_id IS NOT NULL)
  AND ($2::timestamptz IS NULL OR t.tx_date >= $2::timestamptz)
  AND ($3::timestamptz IS NULL OR t.tx_date <= $3::timestamptz)
`

type GetDashboardSummaryParams struct {
	UserID uuid.UUID  `json:"user_id"`
	Start  *time.Time `json:"start"`
	End    *time.Time `json:"end"`
}

type GetDashboardSummaryRow struct {
	TotalAccounts             int64       `json:"total_accounts"`
	TotalTransactions         int64       `json:"total_transactions"`
	TotalIncome               interface{} `json:"total_income"`
	TotalExpenses             interface{} `json:"total_expenses"`
	TransactionsLast30Days    int64       `json:"transactions_last_30_days"`
	UncategorizedTransactions int64       `json:"uncategorized_transactions"`
}

func (q *Queries) GetDashboardSummary(ctx context.Context, arg GetDashboardSummaryParams) (GetDashboardSummaryRow, error) {
	row := q.db.QueryRow(ctx, getDashboardSummary, arg.UserID, arg.Start, arg.End)
	var i GetDashboardSummaryRow
	err := row.Scan(
		&i.TotalAccounts,
		&i.TotalTransactions,
		&i.TotalIncome,
		&i.TotalExpenses,
		&i.TransactionsLast30Days,
		&i.UncategorizedTransactions,
	)
	return i, err
}

const getDashboardSummaryForAccount = `-- name: GetDashboardSummaryForAccount :one
SELECT
  COUNT(DISTINCT a.id) AS total_accounts,
  COUNT(t.id) AS total_transactions,
  COALESCE(SUM(CASE WHEN t.tx_direction = 1 THEN (t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0 ELSE 0 END), 0) AS total_income,
  COALESCE(SUM(CASE WHEN t.tx_direction = 2 THEN (t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0 ELSE 0 END), 0) AS total_expenses,
  COUNT(DISTINCT CASE WHEN t.tx_date >= CURRENT_DATE - INTERVAL '30 days' THEN t.id END) AS transactions_last_30_days,
  COUNT(DISTINCT CASE WHEN t.category_id IS NULL THEN t.id END) AS uncategorized_transactions
FROM accounts a
LEFT JOIN account_users au ON a.id = au.account_id AND au.user_id = $1::uuid
LEFT JOIN transactions t ON a.id = t.account_id
WHERE (a.owner_id = $1::uuid OR au.user_id IS NOT NULL)
  AND a.id = $2::bigint
  AND ($3::timestamptz IS NULL OR t.tx_date >= $3::timestamptz)
  AND ($4::timestamptz IS NULL OR t.tx_date <= $4::timestamptz)
`

type GetDashboardSummaryForAccountParams struct {
	UserID    uuid.UUID  `json:"user_id"`
	AccountID int64      `json:"account_id"`
	Start     *time.Time `json:"start"`
	End       *time.Time `json:"end"`
}

type GetDashboardSummaryForAccountRow struct {
	TotalAccounts             int64       `json:"total_accounts"`
	TotalTransactions         int64       `json:"total_transactions"`
	TotalIncome               interface{} `json:"total_income"`
	TotalExpenses             interface{} `json:"total_expenses"`
	TransactionsLast30Days    int64       `json:"transactions_last_30_days"`
	UncategorizedTransactions int64       `json:"uncategorized_transactions"`
}

func (q *Queries) GetDashboardSummaryForAccount(ctx context.Context, arg GetDashboardSummaryForAccountParams) (GetDashboardSummaryForAccountRow, error) {
	row := q.db.QueryRow(ctx, getDashboardSummaryForAccount,
		arg.UserID,
		arg.AccountID,
		arg.Start,
		arg.End,
	)
	var i GetDashboardSummaryForAccountRow
	err := row.Scan(
		&i.TotalAccounts,
		&i.TotalTransactions,
		&i.TotalIncome,
		&i.TotalExpenses,
		&i.TransactionsLast30Days,
		&i.UncategorizedTransactions,
	)
	return i, err
}

const getDashboardTrends = `-- name: GetDashboardTrends :many
SELECT
  to_char(t.tx_date::date, 'YYYY-MM-DD') AS date,
  SUM(CASE WHEN t.tx_direction = 1 THEN (t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0 ELSE 0 END) AS income,
  SUM(CASE WHEN t.tx_direction = 2 THEN (t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0 ELSE 0 END) AS expenses
FROM transactions t
JOIN accounts a ON t.account_id = a.id
LEFT JOIN account_users au ON a.id = au.account_id AND au.user_id = $1::uuid
WHERE (a.owner_id = $1::uuid OR au.user_id IS NOT NULL)
  AND ($2::timestamptz IS NULL OR t.tx_date >= $2::timestamptz)
  AND ($3::timestamptz IS NULL OR t.tx_date <= $3::timestamptz)
GROUP BY date
ORDER BY date
`

type GetDashboardTrendsParams struct {
	UserID uuid.UUID  `json:"user_id"`
	Start  *time.Time `json:"start"`
	End    *time.Time `json:"end"`
}

type GetDashboardTrendsRow struct {
	Date     string `json:"date"`
	Income   int64  `json:"income"`
	Expenses int64  `json:"expenses"`
}

func (q *Queries) GetDashboardTrends(ctx context.Context, arg GetDashboardTrendsParams) ([]GetDashboardTrendsRow, error) {
	rows, err := q.db.Query(ctx, getDashboardTrends, arg.UserID, arg.Start, arg.End)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDashboardTrendsRow
	for rows.Next() {
		var i GetDashboardTrendsRow
		if err := rows.Scan(&i.Date, &i.Income, &i.Expenses); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDashboardTrendsForAccount = `-- name: GetDashboardTrendsForAccount :many
SELECT
  to_char(t.tx_date::date, 'YYYY-MM-DD') AS date,
  SUM(CASE WHEN t.tx_direction = 1 THEN (t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0 ELSE 0 END) AS income,
  SUM(CASE WHEN t.tx_direction = 2 THEN (t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0 ELSE 0 END) AS expenses
FROM transactions t
JOIN accounts a ON t.account_id = a.id
LEFT JOIN account_users au ON a.id = au.account_id AND au.user_id = $1::uuid
WHERE (a.owner_id = $1::uuid OR au.user_id IS NOT NULL)
  AND a.id = $2::bigint
  AND ($3::timestamptz IS NULL OR t.tx_date >= $3::timestamptz)
  AND ($4::timestamptz IS NULL OR t.tx_date <= $4::timestamptz)
GROUP BY date
ORDER BY date
`

type GetDashboardTrendsForAccountParams struct {
	UserID    uuid.UUID  `json:"user_id"`
	AccountID int64      `json:"account_id"`
	Start     *time.Time `json:"start"`
	End       *time.Time `json:"end"`
}

type GetDashboardTrendsForAccountRow struct {
	Date     string `json:"date"`
	Income   int64  `json:"income"`
	Expenses int64  `json:"expenses"`
}

func (q *Queries) GetDashboardTrendsForAccount(ctx context.Context, arg GetDashboardTrendsForAccountParams) ([]GetDashboardTrendsForAccountRow, error) {
	rows, err := q.db.Query(ctx, getDashboardTrendsForAccount,
		arg.UserID,
		arg.AccountID,
		arg.Start,
		arg.End,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDashboardTrendsForAccountRow
	for rows.Next() {
		var i GetDashboardTrendsForAccountRow
		if err := rows.Scan(&i.Date, &i.Income, &i.Expenses); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthlyComparison = `-- name: GetMonthlyComparison :many
SELECT
  to_char(t.tx_date, 'YYYY-MM') AS month,
  SUM(CASE WHEN t.tx_direction = 1 THEN (t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0 ELSE 0 END) AS income,
  SUM(CASE WHEN t.tx_direction = 2 THEN (t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0 ELSE 0 END) AS expenses,
  SUM(CASE WHEN t.tx_direction = 1 THEN (t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0 ELSE -((t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0) END) AS net
FROM transactions t
JOIN accounts a ON t.account_id = a.id
LEFT JOIN account_users au ON a.id = au.account_id AND au.user_id = $1::uuid
WHERE (a.owner_id = $1::uuid OR au.user_id IS NOT NULL)
  AND t.tx_date >= COALESCE($2::timestamptz, CURRENT_DATE - INTERVAL '12 months')
  AND t.tx_date <= COALESCE($3::timestamptz, CURRENT_DATE)
GROUP BY month
ORDER BY month
`

type GetMonthlyComparisonParams struct {
	UserID uuid.UUID  `json:"user_id"`
	Start  *time.Time `json:"start"`
	End    *time.Time `json:"end"`
}

type GetMonthlyComparisonRow struct {
	Month    string `json:"month"`
	Income   int64  `json:"income"`
	Expenses int64  `json:"expenses"`
	Net      int64  `json:"net"`
}

func (q *Queries) GetMonthlyComparison(ctx context.Context, arg GetMonthlyComparisonParams) ([]GetMonthlyComparisonRow, error) {
	rows, err := q.db.Query(ctx, getMonthlyComparison, arg.UserID, arg.Start, arg.End)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMonthlyComparisonRow
	for rows.Next() {
		var i GetMonthlyComparisonRow
		if err := rows.Scan(
			&i.Month,
			&i.Income,
			&i.Expenses,
			&i.Net,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopCategories = `-- name: GetTopCategories :many
SELECT
  c.slug,
  c.label,
  c.color,
  COUNT(t.id) AS transaction_count,
  SUM((t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0) AS total_amount
FROM transactions t
JOIN categories c ON t.category_id = c.id
JOIN accounts a ON t.account_id = a.id
LEFT JOIN account_users au ON a.id = au.account_id AND au.user_id = $1::uuid
WHERE (a.owner_id = $1::uuid OR au.user_id IS NOT NULL)
  AND t.tx_direction = 2  -- expenses only
  AND ($2::timestamptz IS NULL OR t.tx_date >= $2::timestamptz)
  AND ($3::timestamptz IS NULL OR t.tx_date <= $3::timestamptz)
GROUP BY c.id, c.slug, c.label, c.color
ORDER BY total_amount DESC
LIMIT COALESCE($4::int, 10)
`

type GetTopCategoriesParams struct {
	UserID uuid.UUID  `json:"user_id"`
	Start  *time.Time `json:"start"`
	End    *time.Time `json:"end"`
	Limit  *int32     `json:"limit"`
}

type GetTopCategoriesRow struct {
	Slug             string `json:"slug"`
	Label            string `json:"label"`
	Color            string `json:"color"`
	TransactionCount int64  `json:"transaction_count"`
	TotalAmount      int64  `json:"total_amount"`
}

func (q *Queries) GetTopCategories(ctx context.Context, arg GetTopCategoriesParams) ([]GetTopCategoriesRow, error) {
	rows, err := q.db.Query(ctx, getTopCategories,
		arg.UserID,
		arg.Start,
		arg.End,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopCategoriesRow
	for rows.Next() {
		var i GetTopCategoriesRow
		if err := rows.Scan(
			&i.Slug,
			&i.Label,
			&i.Color,
			&i.TransactionCount,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopMerchants = `-- name: GetTopMerchants :many
SELECT
  t.merchant,
  COUNT(t.id) AS transaction_count,
  SUM((t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0) AS total_amount,
  AVG((t.tx_amount->>'units')::bigint + (t.tx_amount->>'nanos')::bigint/1000000000.0) AS avg_amount
FROM transactions t
JOIN accounts a ON t.account_id = a.id
LEFT JOIN account_users au ON a.id = au.account_id AND au.user_id = $1::uuid
WHERE (a.owner_id = $1::uuid OR au.user_id IS NOT NULL)
  AND t.merchant IS NOT NULL
  AND t.tx_direction = 2  -- expenses only
  AND ($2::timestamptz IS NULL OR t.tx_date >= $2::timestamptz)
  AND ($3::timestamptz IS NULL OR t.tx_date <= $3::timestamptz)
GROUP BY t.merchant
ORDER BY total_amount DESC
LIMIT COALESCE($4::int, 10)
`

type GetTopMerchantsParams struct {
	UserID uuid.UUID  `json:"user_id"`
	Start  *time.Time `json:"start"`
	End    *time.Time `json:"end"`
	Limit  *int32     `json:"limit"`
}

type GetTopMerchantsRow struct {
	Merchant         *string `json:"merchant"`
	TransactionCount int64   `json:"transaction_count"`
	TotalAmount      int64   `json:"total_amount"`
	AvgAmount        float64 `json:"avg_amount"`
}

func (q *Queries) GetTopMerchants(ctx context.Context, arg GetTopMerchantsParams) ([]GetTopMerchantsRow, error) {
	rows, err := q.db.Query(ctx, getTopMerchants,
		arg.UserID,
		arg.Start,
		arg.End,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopMerchantsRow
	for rows.Next() {
		var i GetTopMerchantsRow
		if err := rows.Scan(
			&i.Merchant,
			&i.TransactionCount,
			&i.TotalAmount,
			&i.AvgAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
