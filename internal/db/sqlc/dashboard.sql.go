// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dashboard.sql

package sqlcdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getDashboardBalance = `-- name: GetDashboardBalance :one
SELECT COALESCE(SUM(a.anchor_balance + COALESCE(d.delta, 0)), 0)::double precision AS total_balance
FROM accounts a
LEFT JOIN LATERAL (
  SELECT SUM(
    CASE
      WHEN t.tx_direction = 'incoming' THEN t.tx_amount
      WHEN t.tx_direction = 'outgoing' THEN -t.tx_amount
    END
  ) AS delta
  FROM transactions t
  WHERE t.account_id = a.id
    AND t.tx_date > a.anchor_date
) d ON TRUE
`

func (q *Queries) GetDashboardBalance(ctx context.Context) (float64, error) {
	row := q.db.QueryRow(ctx, getDashboardBalance)
	var total_balance float64
	err := row.Scan(&total_balance)
	return total_balance, err
}

const getDashboardDebt = `-- name: GetDashboardDebt :one
SELECT COALESCE(SUM(a.anchor_balance + COALESCE(d.delta, 0)), 0)::double precision AS total_debt
FROM accounts a
LEFT JOIN LATERAL (
  SELECT SUM(
    CASE
      WHEN t.tx_direction = 'incoming' THEN t.tx_amount
      WHEN t.tx_direction = 'outgoing' THEN -t.tx_amount
    END
  ) AS delta
  FROM transactions t
  WHERE t.account_id = a.id
    AND t.tx_date > a.anchor_date
) d ON TRUE
WHERE a.account_type = 'credit_card'
`

func (q *Queries) GetDashboardDebt(ctx context.Context) (float64, error) {
	row := q.db.QueryRow(ctx, getDashboardDebt)
	var total_debt float64
	err := row.Scan(&total_debt)
	return total_debt, err
}

const getDashboardTrends = `-- name: GetDashboardTrends :many
SELECT
  to_char(tx_date::date, 'YYYY-MM-DD') AS date,
  SUM(CASE WHEN tx_direction = 'incoming' THEN tx_amount ELSE 0 END) AS income,
  SUM(CASE WHEN tx_direction = 'outgoing' THEN tx_amount ELSE 0 END) AS expenses
FROM transactions
WHERE ($1::timestamptz IS NULL OR tx_date >= $1::timestamptz)
  AND ($2::timestamptz   IS NULL OR tx_date <= $2::timestamptz)
GROUP BY date
ORDER BY date
`

type GetDashboardTrendsParams struct {
	Start pgtype.Timestamptz `json:"start"`
	End   pgtype.Timestamptz `json:"end"`
}

type GetDashboardTrendsRow struct {
	Date     string `json:"date"`
	Income   int64  `json:"income"`
	Expenses int64  `json:"expenses"`
}

func (q *Queries) GetDashboardTrends(ctx context.Context, arg GetDashboardTrendsParams) ([]GetDashboardTrendsRow, error) {
	rows, err := q.db.Query(ctx, getDashboardTrends, arg.Start, arg.End)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDashboardTrendsRow
	for rows.Next() {
		var i GetDashboardTrendsRow
		if err := rows.Scan(&i.Date, &i.Income, &i.Expenses); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
