// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_credentials.sql

package sqlcdb

import (
	"context"

	"github.com/google/uuid"
)

const checkCredentialExists = `-- name: CheckCredentialExists :one
SELECT EXISTS(
  SELECT 1 FROM user_credentials 
  WHERE credential_id = $1::bytea
) AS exists
`

func (q *Queries) CheckCredentialExists(ctx context.Context, credentialID []byte) (bool, error) {
	row := q.db.QueryRow(ctx, checkCredentialExists, credentialID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countCredentialsForUser = `-- name: CountCredentialsForUser :one
SELECT COUNT(*) AS credential_count
FROM user_credentials
WHERE user_id = $1::uuid
`

func (q *Queries) CountCredentialsForUser(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countCredentialsForUser, userID)
	var credential_count int64
	err := row.Scan(&credential_count)
	return credential_count, err
}

const createCredential = `-- name: CreateCredential :one
INSERT INTO user_credentials (user_id, credential_id, public_key, sign_count)
VALUES ($1::uuid, $2::bytea, $3::bytea, $4::bigint)
RETURNING id, user_id, credential_id, public_key, sign_count, created_at
`

type CreateCredentialParams struct {
	UserID       uuid.UUID `json:"user_id"`
	CredentialID []byte    `json:"credential_id"`
	PublicKey    []byte    `json:"public_key"`
	SignCount    int64     `json:"sign_count"`
}

func (q *Queries) CreateCredential(ctx context.Context, arg CreateCredentialParams) (UserCredential, error) {
	row := q.db.QueryRow(ctx, createCredential,
		arg.UserID,
		arg.CredentialID,
		arg.PublicKey,
		arg.SignCount,
	)
	var i UserCredential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CredentialID,
		&i.PublicKey,
		&i.SignCount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAllCredentialsForUser = `-- name: DeleteAllCredentialsForUser :execrows
DELETE FROM user_credentials 
WHERE user_id = $1::uuid
`

func (q *Queries) DeleteAllCredentialsForUser(ctx context.Context, userID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAllCredentialsForUser, userID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteCredentialForUser = `-- name: DeleteCredentialForUser :execrows
DELETE FROM user_credentials 
WHERE id = $1::uuid AND user_id = $2::uuid
`

type DeleteCredentialForUserParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteCredentialForUser(ctx context.Context, arg DeleteCredentialForUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteCredentialForUser, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getCredential = `-- name: GetCredential :one
SELECT id, user_id, credential_id, public_key, sign_count, created_at
FROM user_credentials
WHERE id = $1::uuid
`

// Legacy admin queries (use sparingly)
func (q *Queries) GetCredential(ctx context.Context, id uuid.UUID) (UserCredential, error) {
	row := q.db.QueryRow(ctx, getCredential, id)
	var i UserCredential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CredentialID,
		&i.PublicKey,
		&i.SignCount,
		&i.CreatedAt,
	)
	return i, err
}

const getCredentialByCredentialId = `-- name: GetCredentialByCredentialId :one
SELECT id, user_id, credential_id, public_key, sign_count, created_at
FROM user_credentials
WHERE credential_id = $1::bytea
`

func (q *Queries) GetCredentialByCredentialId(ctx context.Context, credentialID []byte) (UserCredential, error) {
	row := q.db.QueryRow(ctx, getCredentialByCredentialId, credentialID)
	var i UserCredential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CredentialID,
		&i.PublicKey,
		&i.SignCount,
		&i.CreatedAt,
	)
	return i, err
}

const getCredentialForUser = `-- name: GetCredentialForUser :one
SELECT id, user_id, credential_id, public_key, sign_count, created_at
FROM user_credentials
WHERE id = $1::uuid AND user_id = $2::uuid
`

type GetCredentialForUserParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetCredentialForUser(ctx context.Context, arg GetCredentialForUserParams) (UserCredential, error) {
	row := q.db.QueryRow(ctx, getCredentialForUser, arg.ID, arg.UserID)
	var i UserCredential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CredentialID,
		&i.PublicKey,
		&i.SignCount,
		&i.CreatedAt,
	)
	return i, err
}

const listCredentialsByUser = `-- name: ListCredentialsByUser :many
SELECT id, user_id, credential_id, public_key, sign_count, created_at
FROM user_credentials
WHERE user_id = $1::uuid
ORDER BY created_at DESC
`

func (q *Queries) ListCredentialsByUser(ctx context.Context, userID uuid.UUID) ([]UserCredential, error) {
	rows, err := q.db.Query(ctx, listCredentialsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserCredential
	for rows.Next() {
		var i UserCredential
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CredentialID,
			&i.PublicKey,
			&i.SignCount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCredentialSignCount = `-- name: UpdateCredentialSignCount :execrows
UPDATE user_credentials
SET sign_count = $1::bigint
WHERE id = $2::uuid AND user_id = $3::uuid
`

type UpdateCredentialSignCountParams struct {
	SignCount int64     `json:"sign_count"`
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateCredentialSignCount(ctx context.Context, arg UpdateCredentialSignCountParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateCredentialSignCount, arg.SignCount, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateCredentialSignCountByCredentialId = `-- name: UpdateCredentialSignCountByCredentialId :execrows
UPDATE user_credentials
SET sign_count = $1::bigint
WHERE credential_id = $2::bytea
`

type UpdateCredentialSignCountByCredentialIdParams struct {
	SignCount    int64  `json:"sign_count"`
	CredentialID []byte `json:"credential_id"`
}

func (q *Queries) UpdateCredentialSignCountByCredentialId(ctx context.Context, arg UpdateCredentialSignCountByCredentialIdParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateCredentialSignCountByCredentialId, arg.SignCount, arg.CredentialID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
