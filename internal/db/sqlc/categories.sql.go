// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: categories.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
insert into
  categories (user_id, slug, color)
values
  ($1::uuid, $2::text, $3::text)
returning
  id,
  user_id,
  slug,
  color,
  created_at,
  updated_at
`

type CreateCategoryParams struct {
	UserID uuid.UUID `json:"user_id"`
	Slug   string    `json:"slug"`
	Color  string    `json:"color"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.UserID, arg.Slug, arg.Color)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCategoryIfNotExists = `-- name: CreateCategoryIfNotExists :one
insert into
  categories (user_id, slug, color)
values
  ($1::uuid, $2::text, $3::text) on CONFLICT (user_id, slug) do NOTHING
returning
  id,
  user_id,
  slug,
  color,
  created_at,
  updated_at
`

type CreateCategoryIfNotExistsParams struct {
	UserID uuid.UUID `json:"user_id"`
	Slug   string    `json:"slug"`
	Color  string    `json:"color"`
}

func (q *Queries) CreateCategoryIfNotExists(ctx context.Context, arg CreateCategoryIfNotExistsParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategoryIfNotExists, arg.UserID, arg.Slug, arg.Color)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategoriesBySlugPrefix = `-- name: DeleteCategoriesBySlugPrefix :execrows
delete from
  categories
where
  user_id = $1::uuid
  and (
    slug = $2::text
    or slug like $2::text || '.%'
  )
`

type DeleteCategoriesBySlugPrefixParams struct {
	UserID uuid.UUID `json:"user_id"`
	Slug   string    `json:"slug"`
}

func (q *Queries) DeleteCategoriesBySlugPrefix(ctx context.Context, arg DeleteCategoriesBySlugPrefixParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteCategoriesBySlugPrefix, arg.UserID, arg.Slug)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getCategory = `-- name: GetCategory :one
select
  id,
  user_id,
  slug,
  color,
  created_at,
  updated_at
from
  categories
where
  id = $1::bigint
  and user_id = $2::uuid
`

type GetCategoryParams struct {
	ID     int64     `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetCategory(ctx context.Context, arg GetCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, arg.ID, arg.UserID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryBySlug = `-- name: GetCategoryBySlug :one
select
  id,
  user_id,
  slug,
  color,
  created_at,
  updated_at
from
  categories
where
  slug = $1::text
  and user_id = $2::uuid
`

type GetCategoryBySlugParams struct {
	Slug   string    `json:"slug"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetCategoryBySlug(ctx context.Context, arg GetCategoryBySlugParams) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryBySlug, arg.Slug, arg.UserID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
select
  id,
  user_id,
  slug,
  color,
  created_at,
  updated_at
from
  categories
where
  user_id = $1::uuid
order by
  slug
`

func (q *Queries) ListCategories(ctx context.Context, userID uuid.UUID) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Slug,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
update
  categories
set
  slug = $1::text,
  color = $2::text
where
  id = $3::bigint
  and user_id = $4::uuid
returning
  id,
  user_id,
  slug,
  color,
  created_at,
  updated_at
`

type UpdateCategoryParams struct {
	Slug   *string   `json:"slug"`
	Color  *string   `json:"color"`
	ID     int64     `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.Slug,
		arg.Color,
		arg.ID,
		arg.UserID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateChildCategorySlugs = `-- name: UpdateChildCategorySlugs :execrows
update
  categories
set
  slug = $1::text || substring(slug from length($2::text) + 1)
where
  user_id = $3::uuid
  and slug like $2::text || '.%'
`

type UpdateChildCategorySlugsParams struct {
	NewSlugPrefix string    `json:"new_slug_prefix"`
	OldSlugPrefix string    `json:"old_slug_prefix"`
	UserID        uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateChildCategorySlugs(ctx context.Context, arg UpdateChildCategorySlugsParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateChildCategorySlugs, arg.NewSlugPrefix, arg.OldSlugPrefix, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
