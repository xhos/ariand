// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package sqlcdb

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (slug, label, color)
VALUES ($1::text, $2::text, $3::text)
RETURNING id, slug, label, color, created_at, updated_at
`

type CreateCategoryParams struct {
	Slug  string `json:"slug"`
	Label string `json:"label"`
	Color string `json:"color"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.Slug, arg.Label, arg.Color)
	var i Category
	err := row.Scan(
		&i.Id,
		&i.Slug,
		&i.Label,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :execrows
DELETE FROM categories
WHERE id = $1::bigint
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.Exec(ctx, deleteCategory, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, slug, label, color, created_at, updated_at
FROM categories
WHERE id = $1::bigint
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.Id,
		&i.Slug,
		&i.Label,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryBySlug = `-- name: GetCategoryBySlug :one
SELECT id, slug, label, color, created_at, updated_at
FROM categories
WHERE slug = $1::text
`

func (q *Queries) GetCategoryBySlug(ctx context.Context, slug string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryBySlug, slug)
	var i Category
	err := row.Scan(
		&i.Id,
		&i.Slug,
		&i.Label,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, slug, label, color, created_at, updated_at
FROM categories
ORDER BY slug
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.Id,
			&i.Slug,
			&i.Label,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategorySlugs = `-- name: ListCategorySlugs :many
SELECT slug
FROM categories
ORDER BY slug
`

func (q *Queries) ListCategorySlugs(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, listCategorySlugs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var slug string
		if err := rows.Scan(&slug); err != nil {
			return nil, err
		}
		items = append(items, slug)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategoryPartial = `-- name: UpdateCategoryPartial :one
UPDATE categories
SET
  slug  = CASE WHEN $1::bool  THEN $2::text  ELSE slug  END,
  label = CASE WHEN $3::bool THEN $4::text ELSE label END,
  color = CASE WHEN $5::bool THEN $6::text ELSE color END
WHERE id = $7::bigint
RETURNING id, slug, label, color, created_at, updated_at
`

type UpdateCategoryPartialParams struct {
	SlugSet  bool   `json:"slugSet"`
	Slug     string `json:"slug"`
	LabelSet bool   `json:"labelSet"`
	Label    string `json:"label"`
	ColorSet bool   `json:"colorSet"`
	Color    string `json:"color"`
	Id       int64  `json:"id"`
}

func (q *Queries) UpdateCategoryPartial(ctx context.Context, arg UpdateCategoryPartialParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategoryPartial,
		arg.SlugSet,
		arg.Slug,
		arg.LabelSet,
		arg.Label,
		arg.ColorSet,
		arg.Color,
		arg.Id,
	)
	var i Category
	err := row.Scan(
		&i.Id,
		&i.Slug,
		&i.Label,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
