// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const checkUserExists = `-- name: CheckUserExists :one
select
  exists(
    select
      1
    from
      users
    where
      id = $1::uuid
  ) as exists
`

func (q *Queries) CheckUserExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
insert into
  users (id, email, display_name)
values
  (
    $1::uuid,
    $2::text,
    $3::text
  )
returning
  id,
  email,
  display_name,
  default_account_id,
  created_at,
  updated_at
`

type CreateUserParams struct {
	ID          uuid.UUID `json:"id"`
	Email       string    `json:"email"`
	DisplayName *string   `json:"display_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Email, arg.DisplayName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.DefaultAccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :execrows
delete from
  users
where
  id = $1::uuid
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUser, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteUserWithCascade = `-- name: DeleteUserWithCascade :execrows
with removed_from_accounts as (
  delete from
    account_users
  where
    user_id = $1::uuid
  returning
    user_id
)
delete from
  users
where
  id = $1::uuid
`

func (q *Queries) DeleteUserWithCascade(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUserWithCascade, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getUser = `-- name: GetUser :one
select
  id,
  email,
  display_name,
  default_account_id,
  created_at,
  updated_at
from
  users
where
  id = $1::uuid
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.DefaultAccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select
  id,
  email,
  display_name,
  default_account_id,
  created_at,
  updated_at
from
  users
where
  lower(email) = lower($1::text)
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.DefaultAccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserFirstAccount = `-- name: GetUserFirstAccount :one
select
  id
from
  accounts
where
  owner_id = $1::uuid
order by
  created_at asc
limit
  1
`

func (q *Queries) GetUserFirstAccount(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getUserFirstAccount, userID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listUsers = `-- name: ListUsers :many
select
  id,
  email,
  display_name,
  default_account_id,
  created_at,
  updated_at
from
  users
order by
  created_at desc
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.DisplayName,
			&i.DefaultAccountID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUserDefaultAccount = `-- name: SetUserDefaultAccount :one
update
  users
set
  default_account_id = $1::bigint
where
  id = $2::uuid
returning
  id,
  email,
  display_name,
  default_account_id,
  created_at,
  updated_at
`

type SetUserDefaultAccountParams struct {
	DefaultAccountID int64     `json:"default_account_id"`
	ID               uuid.UUID `json:"id"`
}

func (q *Queries) SetUserDefaultAccount(ctx context.Context, arg SetUserDefaultAccountParams) (User, error) {
	row := q.db.QueryRow(ctx, setUserDefaultAccount, arg.DefaultAccountID, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.DefaultAccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
update
  users
set
  email = COALESCE($1::text, email),
  display_name = COALESCE($2::text, display_name),
  default_account_id = COALESCE(
    $3::bigint,
    default_account_id
  )
where
  id = $4::uuid
returning
  id,
  email,
  display_name,
  default_account_id,
  created_at,
  updated_at
`

type UpdateUserParams struct {
	Email            *string   `json:"email"`
	DisplayName      *string   `json:"display_name"`
	DefaultAccountID *int64    `json:"default_account_id"`
	ID               uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.DisplayName,
		arg.DefaultAccountID,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.DefaultAccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserDisplayName = `-- name: UpdateUserDisplayName :one
update
  users
set
  display_name = $1::text
where
  id = $2::uuid
returning
  id,
  email,
  display_name,
  default_account_id,
  created_at,
  updated_at
`

type UpdateUserDisplayNameParams struct {
	DisplayName string    `json:"display_name"`
	ID          uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserDisplayName(ctx context.Context, arg UpdateUserDisplayNameParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserDisplayName, arg.DisplayName, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.DefaultAccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
