-- +goose Up
CREATE EXTENSION IF NOT EXISTS pg_trgm;
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- +goose StatementBegin
CREATE OR REPLACE FUNCTION enforce_currency_upper_accounts()
RETURNS TRIGGER LANGUAGE plpgsql AS $$
BEGIN
  IF NEW.anchor_currency IS NOT NULL THEN
    NEW.anchor_currency := upper(NEW.anchor_currency);
  END IF;
  RETURN NEW;
END$$;

CREATE OR REPLACE FUNCTION enforce_currency_upper_transactions()
RETURNS TRIGGER LANGUAGE plpgsql AS $$
BEGIN
  IF NEW.tx_currency IS NOT NULL THEN
    NEW.tx_currency := upper(NEW.tx_currency);
  END IF;
  IF NEW.foreign_currency IS NOT NULL THEN
    NEW.foreign_currency := upper(NEW.foreign_currency);
  END IF;
  RETURN NEW;
END$$;

CREATE OR REPLACE FUNCTION enforce_currency_upper_receipts()
RETURNS TRIGGER LANGUAGE plpgsql AS $$
BEGIN
  IF NEW.currency IS NOT NULL THEN
    NEW.currency := upper(NEW.currency);
  END IF;
  RETURN NEW;
END$$;

CREATE OR REPLACE FUNCTION touch_updated_at()
RETURNS TRIGGER LANGUAGE plpgsql AS $$
BEGIN
  NEW.updated_at := NOW();
  RETURN NEW;
END$$;
-- +goose StatementEnd

--- users --------------------------------------------------------------

CREATE TABLE users (
  id                 UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email              TEXT        NOT NULL,
  display_name       TEXT,
  default_account_id BIGINT,
  created_at         TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at         TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE UNIQUE INDEX ux_users_email_ci ON users (lower(email));
CREATE INDEX idx_users_default_account ON users(default_account_id);

CREATE TRIGGER trg_users_update
  BEFORE UPDATE ON users
  FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

--- user_credentials ---------------------------------------------------

CREATE TABLE user_credentials (
  id            UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id       UUID   NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  credential_id BYTEA  NOT NULL UNIQUE,
  public_key    BYTEA  NOT NULL,
  sign_count    BIGINT NOT NULL DEFAULT 0,
  created_at    TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_user_credentials_user ON user_credentials(user_id);

--- accounts -----------------------------------------------------------

CREATE TABLE accounts (
  id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  owner_id         UUID        NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  name             TEXT        NOT NULL,
  bank             TEXT        NOT NULL,
  account_type     SMALLINT    NOT NULL DEFAULT 0
                       CHECK (account_type BETWEEN 0 AND 5),
  alias            TEXT,
  anchor_date      DATE        NOT NULL DEFAULT CURRENT_DATE,
  anchor_balance   NUMERIC(18,2) NOT NULL DEFAULT 0,
  anchor_currency  CHAR(3)     NOT NULL DEFAULT 'CAD',
  created_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT accounts_owner_name_unique UNIQUE (owner_id, name)
);

CREATE TRIGGER trg_accounts_update
  BEFORE UPDATE ON accounts
  FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

CREATE TRIGGER trg_accounts_currency_upcase
  BEFORE INSERT OR UPDATE ON accounts
  FOR EACH ROW EXECUTE FUNCTION enforce_currency_upper_accounts();

CREATE INDEX idx_accounts_owner ON accounts(owner_id);

-- add the foreign key constraint for users.default_account_id after accounts table exists
ALTER TABLE users
  ADD CONSTRAINT fk_users_default_account
  FOREIGN KEY (default_account_id)
  REFERENCES accounts(id)
  ON DELETE SET NULL;

--- account_users ------------------------------------------------------

CREATE TABLE account_users (
  account_id BIGINT NOT NULL REFERENCES accounts(id) ON DELETE CASCADE,
  user_id    UUID   NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  added_at   TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  PRIMARY KEY (account_id, user_id)
);

CREATE INDEX idx_account_users_user_account ON account_users(user_id, account_id);

--- categories ---------------------------------------------------------

CREATE TABLE categories (
  id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  slug       TEXT        NOT NULL UNIQUE,
  label      TEXT        NOT NULL,
  color      TEXT        NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT slug_lower CHECK (slug = lower(slug))
);

CREATE TRIGGER trg_categories_update
  BEFORE UPDATE ON categories
  FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

--- transactions -------------------------------------------------------

CREATE TABLE transactions (
  id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  account_id       BIGINT       NOT NULL REFERENCES accounts(id) ON DELETE CASCADE,

  email_id         TEXT,
  tx_date          TIMESTAMPTZ  NOT NULL,
  tx_amount        NUMERIC(18,2) NOT NULL,
  tx_currency      CHAR(3)      NOT NULL DEFAULT 'CAD',
  tx_direction     SMALLINT     NOT NULL
                   CHECK (tx_direction BETWEEN 0 AND 2),
  tx_desc          TEXT,

  balance_after    NUMERIC(18,2),

  merchant         TEXT,
  category_id      BIGINT       REFERENCES categories(id),
  cat_status       SMALLINT     NOT NULL DEFAULT 2
                   CHECK (cat_status BETWEEN 0 AND 4),
  suggestions      TEXT[],

  user_notes       TEXT,

  foreign_currency CHAR(3),
  foreign_amount   NUMERIC(18,2),
  exchange_rate    NUMERIC(18,6),

  receipt_id       BIGINT UNIQUE,

  created_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at       TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TRIGGER trg_transactions_update
  BEFORE UPDATE ON transactions
  FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

CREATE TRIGGER trg_transactions_currency_upcase
  BEFORE INSERT OR UPDATE ON transactions
  FOR EACH ROW EXECUTE FUNCTION enforce_currency_upper_transactions();

CREATE UNIQUE INDEX ux_transactions_email_id_notnull
  ON transactions(email_id) WHERE email_id IS NOT NULL;
CREATE INDEX idx_tx_account_date ON transactions(account_id, tx_date);
CREATE INDEX idx_tx_category_id  ON transactions(category_id);
CREATE INDEX idx_tx_desc_trgm    ON transactions USING gin (lower(tx_desc) gin_trgm_ops);

--- receipts -----------------------------------------------------------

CREATE TABLE receipts (
  id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

  engine           SMALLINT    NOT NULL
                   CHECK (engine BETWEEN 0 AND 2),
  parse_status     SMALLINT    NOT NULL DEFAULT 1
                   CHECK (parse_status BETWEEN 0 AND 3),
  link_status      SMALLINT    NOT NULL DEFAULT 1
                   CHECK (link_status BETWEEN 0 AND 3),

  match_ids        BIGINT[],

  merchant         TEXT,
  purchase_date    DATE,
  total_amount     NUMERIC(18,2),

  currency         CHAR(3),
  tax_amount       NUMERIC(18,2),

  raw_payload      JSONB,
  canonical_data   JSONB,

  image_url        TEXT,
  image_sha256     BYTEA,

  lat              DOUBLE PRECISION,
  lon              DOUBLE PRECISION,
  location_source  TEXT,
  location_label   TEXT,

  created_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at       TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TRIGGER trg_receipts_update
  BEFORE UPDATE ON receipts
  FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

CREATE TRIGGER trg_receipts_currency_upcase
  BEFORE INSERT OR UPDATE ON receipts
  FOR EACH ROW EXECUTE FUNCTION enforce_currency_upper_receipts();

CREATE INDEX idx_receipts_purchase_date ON receipts(purchase_date);
CREATE INDEX idx_receipts_merchant_trgm ON receipts USING gin (lower(merchant) gin_trgm_ops);

ALTER TABLE transactions
  ADD CONSTRAINT fk_tx_receipt
  FOREIGN KEY (receipt_id)
  REFERENCES receipts(id)
  ON DELETE SET NULL;

--- receipt_items ------------------------------------------------------

CREATE TABLE receipt_items (
  id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  receipt_id    BIGINT       NOT NULL REFERENCES receipts(id) ON DELETE CASCADE,
  line_no       INT,
  name          TEXT         NOT NULL,
  qty           NUMERIC(18,4) DEFAULT 1,
  unit_price    NUMERIC(18,4),
  line_total    NUMERIC(18,4),
  sku           TEXT,
  category_hint TEXT,
  created_at    TIMESTAMPTZ   NOT NULL DEFAULT NOW(),
  updated_at    TIMESTAMPTZ   NOT NULL DEFAULT NOW()
);

CREATE TRIGGER trg_receipt_items_update
  BEFORE UPDATE ON receipt_items
  FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

CREATE INDEX idx_receipt_items_receipt_id ON receipt_items(receipt_id);
CREATE INDEX idx_receipt_items_name_trgm  ON receipt_items USING gin (lower(name) gin_trgm_ops);

-- +goose Down
DROP TABLE IF EXISTS receipt_items;
ALTER TABLE transactions DROP CONSTRAINT IF EXISTS fk_tx_receipt;
DROP TABLE IF EXISTS receipts;
DROP INDEX IF EXISTS idx_tx_desc_trgm;
DROP INDEX IF EXISTS idx_tx_category_id;
DROP INDEX IF EXISTS idx_tx_account_date;
DROP INDEX IF EXISTS ux_transactions_email_id_notnull;
DROP TABLE IF EXISTS transactions;
DROP TABLE IF EXISTS categories;
DROP TABLE IF EXISTS account_users;
ALTER TABLE users DROP CONSTRAINT IF EXISTS fk_users_default_account;
DROP TABLE IF EXISTS accounts;
DROP INDEX IF EXISTS ux_users_email_ci;
DROP TABLE IF EXISTS user_credentials;
DROP TABLE IF EXISTS users;

-- +goose StatementBegin
DROP FUNCTION IF EXISTS touch_updated_at();
DROP FUNCTION IF EXISTS enforce_currency_upper_accounts();
DROP FUNCTION IF EXISTS enforce_currency_upper_transactions();
DROP FUNCTION IF EXISTS enforce_currency_upper_receipts();
-- +goose StatementEnd

DROP EXTENSION IF EXISTS "pgcrypto";
DROP EXTENSION IF EXISTS pg_trgm;
