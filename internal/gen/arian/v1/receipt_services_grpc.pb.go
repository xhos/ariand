// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: arian/v1/receipt_services.proto

package arianv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReceiptService_ListReceipts_FullMethodName                = "/arian.v1.ReceiptService/ListReceipts"
	ReceiptService_GetReceipt_FullMethodName                  = "/arian.v1.ReceiptService/GetReceipt"
	ReceiptService_CreateReceipt_FullMethodName               = "/arian.v1.ReceiptService/CreateReceipt"
	ReceiptService_UploadReceipt_FullMethodName               = "/arian.v1.ReceiptService/UploadReceipt"
	ReceiptService_UpdateReceipt_FullMethodName               = "/arian.v1.ReceiptService/UpdateReceipt"
	ReceiptService_DeleteReceipt_FullMethodName               = "/arian.v1.ReceiptService/DeleteReceipt"
	ReceiptService_ParseReceipt_FullMethodName                = "/arian.v1.ReceiptService/ParseReceipt"
	ReceiptService_GetReceiptsByTransaction_FullMethodName    = "/arian.v1.ReceiptService/GetReceiptsByTransaction"
	ReceiptService_SearchReceipts_FullMethodName              = "/arian.v1.ReceiptService/SearchReceipts"
	ReceiptService_ListReceiptItems_FullMethodName            = "/arian.v1.ReceiptService/ListReceiptItems"
	ReceiptService_GetReceiptItem_FullMethodName              = "/arian.v1.ReceiptService/GetReceiptItem"
	ReceiptService_CreateReceiptItem_FullMethodName           = "/arian.v1.ReceiptService/CreateReceiptItem"
	ReceiptService_UpdateReceiptItem_FullMethodName           = "/arian.v1.ReceiptService/UpdateReceiptItem"
	ReceiptService_DeleteReceiptItem_FullMethodName           = "/arian.v1.ReceiptService/DeleteReceiptItem"
	ReceiptService_BulkCreateReceiptItems_FullMethodName      = "/arian.v1.ReceiptService/BulkCreateReceiptItems"
	ReceiptService_DeleteReceiptItemsByReceipt_FullMethodName = "/arian.v1.ReceiptService/DeleteReceiptItemsByReceipt"
	ReceiptService_GetUnlinkedReceipts_FullMethodName         = "/arian.v1.ReceiptService/GetUnlinkedReceipts"
	ReceiptService_GetReceiptMatchCandidates_FullMethodName   = "/arian.v1.ReceiptService/GetReceiptMatchCandidates"
)

// ReceiptServiceClient is the client API for ReceiptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiptServiceClient interface {
	ListReceipts(ctx context.Context, in *ListReceiptsRequest, opts ...grpc.CallOption) (*ListReceiptsResponse, error)
	GetReceipt(ctx context.Context, in *GetReceiptRequest, opts ...grpc.CallOption) (*GetReceiptResponse, error)
	CreateReceipt(ctx context.Context, in *CreateReceiptRequest, opts ...grpc.CallOption) (*CreateReceiptResponse, error)
	UploadReceipt(ctx context.Context, in *UploadReceiptRequest, opts ...grpc.CallOption) (*UploadReceiptResponse, error)
	UpdateReceipt(ctx context.Context, in *UpdateReceiptRequest, opts ...grpc.CallOption) (*UpdateReceiptResponse, error)
	DeleteReceipt(ctx context.Context, in *DeleteReceiptRequest, opts ...grpc.CallOption) (*DeleteReceiptResponse, error)
	ParseReceipt(ctx context.Context, in *ParseReceiptRequest, opts ...grpc.CallOption) (*ParseReceiptResponse, error)
	GetReceiptsByTransaction(ctx context.Context, in *GetReceiptsByTransactionRequest, opts ...grpc.CallOption) (*GetReceiptsByTransactionResponse, error)
	SearchReceipts(ctx context.Context, in *SearchReceiptsRequest, opts ...grpc.CallOption) (*SearchReceiptsResponse, error)
	// Receipt items management
	ListReceiptItems(ctx context.Context, in *ListReceiptItemsRequest, opts ...grpc.CallOption) (*ListReceiptItemsResponse, error)
	GetReceiptItem(ctx context.Context, in *GetReceiptItemRequest, opts ...grpc.CallOption) (*GetReceiptItemResponse, error)
	CreateReceiptItem(ctx context.Context, in *CreateReceiptItemRequest, opts ...grpc.CallOption) (*CreateReceiptItemResponse, error)
	UpdateReceiptItem(ctx context.Context, in *UpdateReceiptItemRequest, opts ...grpc.CallOption) (*UpdateReceiptItemResponse, error)
	DeleteReceiptItem(ctx context.Context, in *DeleteReceiptItemRequest, opts ...grpc.CallOption) (*DeleteReceiptItemResponse, error)
	BulkCreateReceiptItems(ctx context.Context, in *BulkCreateReceiptItemsRequest, opts ...grpc.CallOption) (*BulkCreateReceiptItemsResponse, error)
	DeleteReceiptItemsByReceipt(ctx context.Context, in *DeleteReceiptItemsByReceiptRequest, opts ...grpc.CallOption) (*DeleteReceiptItemsByReceiptResponse, error)
	// Utility operations
	GetUnlinkedReceipts(ctx context.Context, in *GetUnlinkedReceiptsRequest, opts ...grpc.CallOption) (*GetUnlinkedReceiptsResponse, error)
	GetReceiptMatchCandidates(ctx context.Context, in *GetReceiptMatchCandidatesRequest, opts ...grpc.CallOption) (*GetReceiptMatchCandidatesResponse, error)
}

type receiptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiptServiceClient(cc grpc.ClientConnInterface) ReceiptServiceClient {
	return &receiptServiceClient{cc}
}

func (c *receiptServiceClient) ListReceipts(ctx context.Context, in *ListReceiptsRequest, opts ...grpc.CallOption) (*ListReceiptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReceiptsResponse)
	err := c.cc.Invoke(ctx, ReceiptService_ListReceipts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) GetReceipt(ctx context.Context, in *GetReceiptRequest, opts ...grpc.CallOption) (*GetReceiptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceiptResponse)
	err := c.cc.Invoke(ctx, ReceiptService_GetReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) CreateReceipt(ctx context.Context, in *CreateReceiptRequest, opts ...grpc.CallOption) (*CreateReceiptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReceiptResponse)
	err := c.cc.Invoke(ctx, ReceiptService_CreateReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) UploadReceipt(ctx context.Context, in *UploadReceiptRequest, opts ...grpc.CallOption) (*UploadReceiptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadReceiptResponse)
	err := c.cc.Invoke(ctx, ReceiptService_UploadReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) UpdateReceipt(ctx context.Context, in *UpdateReceiptRequest, opts ...grpc.CallOption) (*UpdateReceiptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReceiptResponse)
	err := c.cc.Invoke(ctx, ReceiptService_UpdateReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) DeleteReceipt(ctx context.Context, in *DeleteReceiptRequest, opts ...grpc.CallOption) (*DeleteReceiptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteReceiptResponse)
	err := c.cc.Invoke(ctx, ReceiptService_DeleteReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) ParseReceipt(ctx context.Context, in *ParseReceiptRequest, opts ...grpc.CallOption) (*ParseReceiptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseReceiptResponse)
	err := c.cc.Invoke(ctx, ReceiptService_ParseReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) GetReceiptsByTransaction(ctx context.Context, in *GetReceiptsByTransactionRequest, opts ...grpc.CallOption) (*GetReceiptsByTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceiptsByTransactionResponse)
	err := c.cc.Invoke(ctx, ReceiptService_GetReceiptsByTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) SearchReceipts(ctx context.Context, in *SearchReceiptsRequest, opts ...grpc.CallOption) (*SearchReceiptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchReceiptsResponse)
	err := c.cc.Invoke(ctx, ReceiptService_SearchReceipts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) ListReceiptItems(ctx context.Context, in *ListReceiptItemsRequest, opts ...grpc.CallOption) (*ListReceiptItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReceiptItemsResponse)
	err := c.cc.Invoke(ctx, ReceiptService_ListReceiptItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) GetReceiptItem(ctx context.Context, in *GetReceiptItemRequest, opts ...grpc.CallOption) (*GetReceiptItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceiptItemResponse)
	err := c.cc.Invoke(ctx, ReceiptService_GetReceiptItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) CreateReceiptItem(ctx context.Context, in *CreateReceiptItemRequest, opts ...grpc.CallOption) (*CreateReceiptItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReceiptItemResponse)
	err := c.cc.Invoke(ctx, ReceiptService_CreateReceiptItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) UpdateReceiptItem(ctx context.Context, in *UpdateReceiptItemRequest, opts ...grpc.CallOption) (*UpdateReceiptItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReceiptItemResponse)
	err := c.cc.Invoke(ctx, ReceiptService_UpdateReceiptItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) DeleteReceiptItem(ctx context.Context, in *DeleteReceiptItemRequest, opts ...grpc.CallOption) (*DeleteReceiptItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteReceiptItemResponse)
	err := c.cc.Invoke(ctx, ReceiptService_DeleteReceiptItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) BulkCreateReceiptItems(ctx context.Context, in *BulkCreateReceiptItemsRequest, opts ...grpc.CallOption) (*BulkCreateReceiptItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCreateReceiptItemsResponse)
	err := c.cc.Invoke(ctx, ReceiptService_BulkCreateReceiptItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) DeleteReceiptItemsByReceipt(ctx context.Context, in *DeleteReceiptItemsByReceiptRequest, opts ...grpc.CallOption) (*DeleteReceiptItemsByReceiptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteReceiptItemsByReceiptResponse)
	err := c.cc.Invoke(ctx, ReceiptService_DeleteReceiptItemsByReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) GetUnlinkedReceipts(ctx context.Context, in *GetUnlinkedReceiptsRequest, opts ...grpc.CallOption) (*GetUnlinkedReceiptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnlinkedReceiptsResponse)
	err := c.cc.Invoke(ctx, ReceiptService_GetUnlinkedReceipts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) GetReceiptMatchCandidates(ctx context.Context, in *GetReceiptMatchCandidatesRequest, opts ...grpc.CallOption) (*GetReceiptMatchCandidatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceiptMatchCandidatesResponse)
	err := c.cc.Invoke(ctx, ReceiptService_GetReceiptMatchCandidates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiptServiceServer is the server API for ReceiptService service.
// All implementations should embed UnimplementedReceiptServiceServer
// for forward compatibility.
type ReceiptServiceServer interface {
	ListReceipts(context.Context, *ListReceiptsRequest) (*ListReceiptsResponse, error)
	GetReceipt(context.Context, *GetReceiptRequest) (*GetReceiptResponse, error)
	CreateReceipt(context.Context, *CreateReceiptRequest) (*CreateReceiptResponse, error)
	UploadReceipt(context.Context, *UploadReceiptRequest) (*UploadReceiptResponse, error)
	UpdateReceipt(context.Context, *UpdateReceiptRequest) (*UpdateReceiptResponse, error)
	DeleteReceipt(context.Context, *DeleteReceiptRequest) (*DeleteReceiptResponse, error)
	ParseReceipt(context.Context, *ParseReceiptRequest) (*ParseReceiptResponse, error)
	GetReceiptsByTransaction(context.Context, *GetReceiptsByTransactionRequest) (*GetReceiptsByTransactionResponse, error)
	SearchReceipts(context.Context, *SearchReceiptsRequest) (*SearchReceiptsResponse, error)
	// Receipt items management
	ListReceiptItems(context.Context, *ListReceiptItemsRequest) (*ListReceiptItemsResponse, error)
	GetReceiptItem(context.Context, *GetReceiptItemRequest) (*GetReceiptItemResponse, error)
	CreateReceiptItem(context.Context, *CreateReceiptItemRequest) (*CreateReceiptItemResponse, error)
	UpdateReceiptItem(context.Context, *UpdateReceiptItemRequest) (*UpdateReceiptItemResponse, error)
	DeleteReceiptItem(context.Context, *DeleteReceiptItemRequest) (*DeleteReceiptItemResponse, error)
	BulkCreateReceiptItems(context.Context, *BulkCreateReceiptItemsRequest) (*BulkCreateReceiptItemsResponse, error)
	DeleteReceiptItemsByReceipt(context.Context, *DeleteReceiptItemsByReceiptRequest) (*DeleteReceiptItemsByReceiptResponse, error)
	// Utility operations
	GetUnlinkedReceipts(context.Context, *GetUnlinkedReceiptsRequest) (*GetUnlinkedReceiptsResponse, error)
	GetReceiptMatchCandidates(context.Context, *GetReceiptMatchCandidatesRequest) (*GetReceiptMatchCandidatesResponse, error)
}

// UnimplementedReceiptServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReceiptServiceServer struct{}

func (UnimplementedReceiptServiceServer) ListReceipts(context.Context, *ListReceiptsRequest) (*ListReceiptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceipts not implemented")
}
func (UnimplementedReceiptServiceServer) GetReceipt(context.Context, *GetReceiptRequest) (*GetReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedReceiptServiceServer) CreateReceipt(context.Context, *CreateReceiptRequest) (*CreateReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReceipt not implemented")
}
func (UnimplementedReceiptServiceServer) UploadReceipt(context.Context, *UploadReceiptRequest) (*UploadReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadReceipt not implemented")
}
func (UnimplementedReceiptServiceServer) UpdateReceipt(context.Context, *UpdateReceiptRequest) (*UpdateReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceipt not implemented")
}
func (UnimplementedReceiptServiceServer) DeleteReceipt(context.Context, *DeleteReceiptRequest) (*DeleteReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReceipt not implemented")
}
func (UnimplementedReceiptServiceServer) ParseReceipt(context.Context, *ParseReceiptRequest) (*ParseReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseReceipt not implemented")
}
func (UnimplementedReceiptServiceServer) GetReceiptsByTransaction(context.Context, *GetReceiptsByTransactionRequest) (*GetReceiptsByTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiptsByTransaction not implemented")
}
func (UnimplementedReceiptServiceServer) SearchReceipts(context.Context, *SearchReceiptsRequest) (*SearchReceiptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchReceipts not implemented")
}
func (UnimplementedReceiptServiceServer) ListReceiptItems(context.Context, *ListReceiptItemsRequest) (*ListReceiptItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceiptItems not implemented")
}
func (UnimplementedReceiptServiceServer) GetReceiptItem(context.Context, *GetReceiptItemRequest) (*GetReceiptItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiptItem not implemented")
}
func (UnimplementedReceiptServiceServer) CreateReceiptItem(context.Context, *CreateReceiptItemRequest) (*CreateReceiptItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReceiptItem not implemented")
}
func (UnimplementedReceiptServiceServer) UpdateReceiptItem(context.Context, *UpdateReceiptItemRequest) (*UpdateReceiptItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceiptItem not implemented")
}
func (UnimplementedReceiptServiceServer) DeleteReceiptItem(context.Context, *DeleteReceiptItemRequest) (*DeleteReceiptItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReceiptItem not implemented")
}
func (UnimplementedReceiptServiceServer) BulkCreateReceiptItems(context.Context, *BulkCreateReceiptItemsRequest) (*BulkCreateReceiptItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateReceiptItems not implemented")
}
func (UnimplementedReceiptServiceServer) DeleteReceiptItemsByReceipt(context.Context, *DeleteReceiptItemsByReceiptRequest) (*DeleteReceiptItemsByReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReceiptItemsByReceipt not implemented")
}
func (UnimplementedReceiptServiceServer) GetUnlinkedReceipts(context.Context, *GetUnlinkedReceiptsRequest) (*GetUnlinkedReceiptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnlinkedReceipts not implemented")
}
func (UnimplementedReceiptServiceServer) GetReceiptMatchCandidates(context.Context, *GetReceiptMatchCandidatesRequest) (*GetReceiptMatchCandidatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiptMatchCandidates not implemented")
}
func (UnimplementedReceiptServiceServer) testEmbeddedByValue() {}

// UnsafeReceiptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiptServiceServer will
// result in compilation errors.
type UnsafeReceiptServiceServer interface {
	mustEmbedUnimplementedReceiptServiceServer()
}

func RegisterReceiptServiceServer(s grpc.ServiceRegistrar, srv ReceiptServiceServer) {
	// If the following call pancis, it indicates UnimplementedReceiptServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReceiptService_ServiceDesc, srv)
}

func _ReceiptService_ListReceipts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReceiptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).ListReceipts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_ListReceipts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).ListReceipts(ctx, req.(*ListReceiptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_GetReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).GetReceipt(ctx, req.(*GetReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_CreateReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).CreateReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_CreateReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).CreateReceipt(ctx, req.(*CreateReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_UploadReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).UploadReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_UploadReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).UploadReceipt(ctx, req.(*UploadReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_UpdateReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).UpdateReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_UpdateReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).UpdateReceipt(ctx, req.(*UpdateReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_DeleteReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).DeleteReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_DeleteReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).DeleteReceipt(ctx, req.(*DeleteReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_ParseReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).ParseReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_ParseReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).ParseReceipt(ctx, req.(*ParseReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_GetReceiptsByTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptsByTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).GetReceiptsByTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_GetReceiptsByTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).GetReceiptsByTransaction(ctx, req.(*GetReceiptsByTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_SearchReceipts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReceiptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).SearchReceipts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_SearchReceipts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).SearchReceipts(ctx, req.(*SearchReceiptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_ListReceiptItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReceiptItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).ListReceiptItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_ListReceiptItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).ListReceiptItems(ctx, req.(*ListReceiptItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_GetReceiptItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).GetReceiptItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_GetReceiptItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).GetReceiptItem(ctx, req.(*GetReceiptItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_CreateReceiptItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReceiptItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).CreateReceiptItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_CreateReceiptItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).CreateReceiptItem(ctx, req.(*CreateReceiptItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_UpdateReceiptItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReceiptItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).UpdateReceiptItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_UpdateReceiptItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).UpdateReceiptItem(ctx, req.(*UpdateReceiptItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_DeleteReceiptItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReceiptItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).DeleteReceiptItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_DeleteReceiptItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).DeleteReceiptItem(ctx, req.(*DeleteReceiptItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_BulkCreateReceiptItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateReceiptItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).BulkCreateReceiptItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_BulkCreateReceiptItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).BulkCreateReceiptItems(ctx, req.(*BulkCreateReceiptItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_DeleteReceiptItemsByReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReceiptItemsByReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).DeleteReceiptItemsByReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_DeleteReceiptItemsByReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).DeleteReceiptItemsByReceipt(ctx, req.(*DeleteReceiptItemsByReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_GetUnlinkedReceipts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnlinkedReceiptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).GetUnlinkedReceipts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_GetUnlinkedReceipts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).GetUnlinkedReceipts(ctx, req.(*GetUnlinkedReceiptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_GetReceiptMatchCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptMatchCandidatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).GetReceiptMatchCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_GetReceiptMatchCandidates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).GetReceiptMatchCandidates(ctx, req.(*GetReceiptMatchCandidatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceiptService_ServiceDesc is the grpc.ServiceDesc for ReceiptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arian.v1.ReceiptService",
	HandlerType: (*ReceiptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListReceipts",
			Handler:    _ReceiptService_ListReceipts_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _ReceiptService_GetReceipt_Handler,
		},
		{
			MethodName: "CreateReceipt",
			Handler:    _ReceiptService_CreateReceipt_Handler,
		},
		{
			MethodName: "UploadReceipt",
			Handler:    _ReceiptService_UploadReceipt_Handler,
		},
		{
			MethodName: "UpdateReceipt",
			Handler:    _ReceiptService_UpdateReceipt_Handler,
		},
		{
			MethodName: "DeleteReceipt",
			Handler:    _ReceiptService_DeleteReceipt_Handler,
		},
		{
			MethodName: "ParseReceipt",
			Handler:    _ReceiptService_ParseReceipt_Handler,
		},
		{
			MethodName: "GetReceiptsByTransaction",
			Handler:    _ReceiptService_GetReceiptsByTransaction_Handler,
		},
		{
			MethodName: "SearchReceipts",
			Handler:    _ReceiptService_SearchReceipts_Handler,
		},
		{
			MethodName: "ListReceiptItems",
			Handler:    _ReceiptService_ListReceiptItems_Handler,
		},
		{
			MethodName: "GetReceiptItem",
			Handler:    _ReceiptService_GetReceiptItem_Handler,
		},
		{
			MethodName: "CreateReceiptItem",
			Handler:    _ReceiptService_CreateReceiptItem_Handler,
		},
		{
			MethodName: "UpdateReceiptItem",
			Handler:    _ReceiptService_UpdateReceiptItem_Handler,
		},
		{
			MethodName: "DeleteReceiptItem",
			Handler:    _ReceiptService_DeleteReceiptItem_Handler,
		},
		{
			MethodName: "BulkCreateReceiptItems",
			Handler:    _ReceiptService_BulkCreateReceiptItems_Handler,
		},
		{
			MethodName: "DeleteReceiptItemsByReceipt",
			Handler:    _ReceiptService_DeleteReceiptItemsByReceipt_Handler,
		},
		{
			MethodName: "GetUnlinkedReceipts",
			Handler:    _ReceiptService_GetUnlinkedReceipts_Handler,
		},
		{
			MethodName: "GetReceiptMatchCandidates",
			Handler:    _ReceiptService_GetReceiptMatchCandidates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arian/v1/receipt_services.proto",
}
