// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: arian/v1/dashboard_services.proto

package arianv1connect

import (
	v1 "ariand/internal/gen/arian/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DashboardServiceName is the fully-qualified name of the DashboardService service.
	DashboardServiceName = "arian.v1.DashboardService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DashboardServiceGetDashboardSummaryProcedure is the fully-qualified name of the
	// DashboardService's GetDashboardSummary RPC.
	DashboardServiceGetDashboardSummaryProcedure = "/arian.v1.DashboardService/GetDashboardSummary"
	// DashboardServiceGetTrendDataProcedure is the fully-qualified name of the DashboardService's
	// GetTrendData RPC.
	DashboardServiceGetTrendDataProcedure = "/arian.v1.DashboardService/GetTrendData"
	// DashboardServiceGetMonthlyComparisonProcedure is the fully-qualified name of the
	// DashboardService's GetMonthlyComparison RPC.
	DashboardServiceGetMonthlyComparisonProcedure = "/arian.v1.DashboardService/GetMonthlyComparison"
	// DashboardServiceGetTopCategoriesProcedure is the fully-qualified name of the DashboardService's
	// GetTopCategories RPC.
	DashboardServiceGetTopCategoriesProcedure = "/arian.v1.DashboardService/GetTopCategories"
	// DashboardServiceGetTopMerchantsProcedure is the fully-qualified name of the DashboardService's
	// GetTopMerchants RPC.
	DashboardServiceGetTopMerchantsProcedure = "/arian.v1.DashboardService/GetTopMerchants"
	// DashboardServiceGetAccountSummaryProcedure is the fully-qualified name of the DashboardService's
	// GetAccountSummary RPC.
	DashboardServiceGetAccountSummaryProcedure = "/arian.v1.DashboardService/GetAccountSummary"
	// DashboardServiceGetAccountBalancesProcedure is the fully-qualified name of the DashboardService's
	// GetAccountBalances RPC.
	DashboardServiceGetAccountBalancesProcedure = "/arian.v1.DashboardService/GetAccountBalances"
	// DashboardServiceGetSpendingTrendsProcedure is the fully-qualified name of the DashboardService's
	// GetSpendingTrends RPC.
	DashboardServiceGetSpendingTrendsProcedure = "/arian.v1.DashboardService/GetSpendingTrends"
	// DashboardServiceGetTotalBalanceProcedure is the fully-qualified name of the DashboardService's
	// GetTotalBalance RPC.
	DashboardServiceGetTotalBalanceProcedure = "/arian.v1.DashboardService/GetTotalBalance"
	// DashboardServiceGetTotalDebtProcedure is the fully-qualified name of the DashboardService's
	// GetTotalDebt RPC.
	DashboardServiceGetTotalDebtProcedure = "/arian.v1.DashboardService/GetTotalDebt"
	// DashboardServiceGetNetBalanceProcedure is the fully-qualified name of the DashboardService's
	// GetNetBalance RPC.
	DashboardServiceGetNetBalanceProcedure = "/arian.v1.DashboardService/GetNetBalance"
	// DashboardServiceGetCategorySpendingComparisonProcedure is the fully-qualified name of the
	// DashboardService's GetCategorySpendingComparison RPC.
	DashboardServiceGetCategorySpendingComparisonProcedure = "/arian.v1.DashboardService/GetCategorySpendingComparison"
)

// DashboardServiceClient is a client for the arian.v1.DashboardService service.
type DashboardServiceClient interface {
	GetDashboardSummary(context.Context, *connect.Request[v1.GetDashboardSummaryRequest]) (*connect.Response[v1.GetDashboardSummaryResponse], error)
	GetTrendData(context.Context, *connect.Request[v1.GetTrendDataRequest]) (*connect.Response[v1.GetTrendDataResponse], error)
	GetMonthlyComparison(context.Context, *connect.Request[v1.GetMonthlyComparisonRequest]) (*connect.Response[v1.GetMonthlyComparisonResponse], error)
	GetTopCategories(context.Context, *connect.Request[v1.GetTopCategoriesRequest]) (*connect.Response[v1.GetTopCategoriesResponse], error)
	GetTopMerchants(context.Context, *connect.Request[v1.GetTopMerchantsRequest]) (*connect.Response[v1.GetTopMerchantsResponse], error)
	GetAccountSummary(context.Context, *connect.Request[v1.GetAccountSummaryRequest]) (*connect.Response[v1.GetAccountSummaryResponse], error)
	GetAccountBalances(context.Context, *connect.Request[v1.GetAccountBalancesRequest]) (*connect.Response[v1.GetAccountBalancesResponse], error)
	GetSpendingTrends(context.Context, *connect.Request[v1.GetSpendingTrendsRequest]) (*connect.Response[v1.GetSpendingTrendsResponse], error)
	GetTotalBalance(context.Context, *connect.Request[v1.GetTotalBalanceRequest]) (*connect.Response[v1.GetTotalBalanceResponse], error)
	GetTotalDebt(context.Context, *connect.Request[v1.GetTotalDebtRequest]) (*connect.Response[v1.GetTotalDebtResponse], error)
	GetNetBalance(context.Context, *connect.Request[v1.GetNetBalanceRequest]) (*connect.Response[v1.GetNetBalanceResponse], error)
	GetCategorySpendingComparison(context.Context, *connect.Request[v1.GetCategorySpendingComparisonRequest]) (*connect.Response[v1.GetCategorySpendingComparisonResponse], error)
}

// NewDashboardServiceClient constructs a client for the arian.v1.DashboardService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDashboardServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DashboardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dashboardServiceMethods := v1.File_arian_v1_dashboard_services_proto.Services().ByName("DashboardService").Methods()
	return &dashboardServiceClient{
		getDashboardSummary: connect.NewClient[v1.GetDashboardSummaryRequest, v1.GetDashboardSummaryResponse](
			httpClient,
			baseURL+DashboardServiceGetDashboardSummaryProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetDashboardSummary")),
			connect.WithClientOptions(opts...),
		),
		getTrendData: connect.NewClient[v1.GetTrendDataRequest, v1.GetTrendDataResponse](
			httpClient,
			baseURL+DashboardServiceGetTrendDataProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetTrendData")),
			connect.WithClientOptions(opts...),
		),
		getMonthlyComparison: connect.NewClient[v1.GetMonthlyComparisonRequest, v1.GetMonthlyComparisonResponse](
			httpClient,
			baseURL+DashboardServiceGetMonthlyComparisonProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetMonthlyComparison")),
			connect.WithClientOptions(opts...),
		),
		getTopCategories: connect.NewClient[v1.GetTopCategoriesRequest, v1.GetTopCategoriesResponse](
			httpClient,
			baseURL+DashboardServiceGetTopCategoriesProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetTopCategories")),
			connect.WithClientOptions(opts...),
		),
		getTopMerchants: connect.NewClient[v1.GetTopMerchantsRequest, v1.GetTopMerchantsResponse](
			httpClient,
			baseURL+DashboardServiceGetTopMerchantsProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetTopMerchants")),
			connect.WithClientOptions(opts...),
		),
		getAccountSummary: connect.NewClient[v1.GetAccountSummaryRequest, v1.GetAccountSummaryResponse](
			httpClient,
			baseURL+DashboardServiceGetAccountSummaryProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetAccountSummary")),
			connect.WithClientOptions(opts...),
		),
		getAccountBalances: connect.NewClient[v1.GetAccountBalancesRequest, v1.GetAccountBalancesResponse](
			httpClient,
			baseURL+DashboardServiceGetAccountBalancesProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetAccountBalances")),
			connect.WithClientOptions(opts...),
		),
		getSpendingTrends: connect.NewClient[v1.GetSpendingTrendsRequest, v1.GetSpendingTrendsResponse](
			httpClient,
			baseURL+DashboardServiceGetSpendingTrendsProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetSpendingTrends")),
			connect.WithClientOptions(opts...),
		),
		getTotalBalance: connect.NewClient[v1.GetTotalBalanceRequest, v1.GetTotalBalanceResponse](
			httpClient,
			baseURL+DashboardServiceGetTotalBalanceProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetTotalBalance")),
			connect.WithClientOptions(opts...),
		),
		getTotalDebt: connect.NewClient[v1.GetTotalDebtRequest, v1.GetTotalDebtResponse](
			httpClient,
			baseURL+DashboardServiceGetTotalDebtProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetTotalDebt")),
			connect.WithClientOptions(opts...),
		),
		getNetBalance: connect.NewClient[v1.GetNetBalanceRequest, v1.GetNetBalanceResponse](
			httpClient,
			baseURL+DashboardServiceGetNetBalanceProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetNetBalance")),
			connect.WithClientOptions(opts...),
		),
		getCategorySpendingComparison: connect.NewClient[v1.GetCategorySpendingComparisonRequest, v1.GetCategorySpendingComparisonResponse](
			httpClient,
			baseURL+DashboardServiceGetCategorySpendingComparisonProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetCategorySpendingComparison")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dashboardServiceClient implements DashboardServiceClient.
type dashboardServiceClient struct {
	getDashboardSummary           *connect.Client[v1.GetDashboardSummaryRequest, v1.GetDashboardSummaryResponse]
	getTrendData                  *connect.Client[v1.GetTrendDataRequest, v1.GetTrendDataResponse]
	getMonthlyComparison          *connect.Client[v1.GetMonthlyComparisonRequest, v1.GetMonthlyComparisonResponse]
	getTopCategories              *connect.Client[v1.GetTopCategoriesRequest, v1.GetTopCategoriesResponse]
	getTopMerchants               *connect.Client[v1.GetTopMerchantsRequest, v1.GetTopMerchantsResponse]
	getAccountSummary             *connect.Client[v1.GetAccountSummaryRequest, v1.GetAccountSummaryResponse]
	getAccountBalances            *connect.Client[v1.GetAccountBalancesRequest, v1.GetAccountBalancesResponse]
	getSpendingTrends             *connect.Client[v1.GetSpendingTrendsRequest, v1.GetSpendingTrendsResponse]
	getTotalBalance               *connect.Client[v1.GetTotalBalanceRequest, v1.GetTotalBalanceResponse]
	getTotalDebt                  *connect.Client[v1.GetTotalDebtRequest, v1.GetTotalDebtResponse]
	getNetBalance                 *connect.Client[v1.GetNetBalanceRequest, v1.GetNetBalanceResponse]
	getCategorySpendingComparison *connect.Client[v1.GetCategorySpendingComparisonRequest, v1.GetCategorySpendingComparisonResponse]
}

// GetDashboardSummary calls arian.v1.DashboardService.GetDashboardSummary.
func (c *dashboardServiceClient) GetDashboardSummary(ctx context.Context, req *connect.Request[v1.GetDashboardSummaryRequest]) (*connect.Response[v1.GetDashboardSummaryResponse], error) {
	return c.getDashboardSummary.CallUnary(ctx, req)
}

// GetTrendData calls arian.v1.DashboardService.GetTrendData.
func (c *dashboardServiceClient) GetTrendData(ctx context.Context, req *connect.Request[v1.GetTrendDataRequest]) (*connect.Response[v1.GetTrendDataResponse], error) {
	return c.getTrendData.CallUnary(ctx, req)
}

// GetMonthlyComparison calls arian.v1.DashboardService.GetMonthlyComparison.
func (c *dashboardServiceClient) GetMonthlyComparison(ctx context.Context, req *connect.Request[v1.GetMonthlyComparisonRequest]) (*connect.Response[v1.GetMonthlyComparisonResponse], error) {
	return c.getMonthlyComparison.CallUnary(ctx, req)
}

// GetTopCategories calls arian.v1.DashboardService.GetTopCategories.
func (c *dashboardServiceClient) GetTopCategories(ctx context.Context, req *connect.Request[v1.GetTopCategoriesRequest]) (*connect.Response[v1.GetTopCategoriesResponse], error) {
	return c.getTopCategories.CallUnary(ctx, req)
}

// GetTopMerchants calls arian.v1.DashboardService.GetTopMerchants.
func (c *dashboardServiceClient) GetTopMerchants(ctx context.Context, req *connect.Request[v1.GetTopMerchantsRequest]) (*connect.Response[v1.GetTopMerchantsResponse], error) {
	return c.getTopMerchants.CallUnary(ctx, req)
}

// GetAccountSummary calls arian.v1.DashboardService.GetAccountSummary.
func (c *dashboardServiceClient) GetAccountSummary(ctx context.Context, req *connect.Request[v1.GetAccountSummaryRequest]) (*connect.Response[v1.GetAccountSummaryResponse], error) {
	return c.getAccountSummary.CallUnary(ctx, req)
}

// GetAccountBalances calls arian.v1.DashboardService.GetAccountBalances.
func (c *dashboardServiceClient) GetAccountBalances(ctx context.Context, req *connect.Request[v1.GetAccountBalancesRequest]) (*connect.Response[v1.GetAccountBalancesResponse], error) {
	return c.getAccountBalances.CallUnary(ctx, req)
}

// GetSpendingTrends calls arian.v1.DashboardService.GetSpendingTrends.
func (c *dashboardServiceClient) GetSpendingTrends(ctx context.Context, req *connect.Request[v1.GetSpendingTrendsRequest]) (*connect.Response[v1.GetSpendingTrendsResponse], error) {
	return c.getSpendingTrends.CallUnary(ctx, req)
}

// GetTotalBalance calls arian.v1.DashboardService.GetTotalBalance.
func (c *dashboardServiceClient) GetTotalBalance(ctx context.Context, req *connect.Request[v1.GetTotalBalanceRequest]) (*connect.Response[v1.GetTotalBalanceResponse], error) {
	return c.getTotalBalance.CallUnary(ctx, req)
}

// GetTotalDebt calls arian.v1.DashboardService.GetTotalDebt.
func (c *dashboardServiceClient) GetTotalDebt(ctx context.Context, req *connect.Request[v1.GetTotalDebtRequest]) (*connect.Response[v1.GetTotalDebtResponse], error) {
	return c.getTotalDebt.CallUnary(ctx, req)
}

// GetNetBalance calls arian.v1.DashboardService.GetNetBalance.
func (c *dashboardServiceClient) GetNetBalance(ctx context.Context, req *connect.Request[v1.GetNetBalanceRequest]) (*connect.Response[v1.GetNetBalanceResponse], error) {
	return c.getNetBalance.CallUnary(ctx, req)
}

// GetCategorySpendingComparison calls arian.v1.DashboardService.GetCategorySpendingComparison.
func (c *dashboardServiceClient) GetCategorySpendingComparison(ctx context.Context, req *connect.Request[v1.GetCategorySpendingComparisonRequest]) (*connect.Response[v1.GetCategorySpendingComparisonResponse], error) {
	return c.getCategorySpendingComparison.CallUnary(ctx, req)
}

// DashboardServiceHandler is an implementation of the arian.v1.DashboardService service.
type DashboardServiceHandler interface {
	GetDashboardSummary(context.Context, *connect.Request[v1.GetDashboardSummaryRequest]) (*connect.Response[v1.GetDashboardSummaryResponse], error)
	GetTrendData(context.Context, *connect.Request[v1.GetTrendDataRequest]) (*connect.Response[v1.GetTrendDataResponse], error)
	GetMonthlyComparison(context.Context, *connect.Request[v1.GetMonthlyComparisonRequest]) (*connect.Response[v1.GetMonthlyComparisonResponse], error)
	GetTopCategories(context.Context, *connect.Request[v1.GetTopCategoriesRequest]) (*connect.Response[v1.GetTopCategoriesResponse], error)
	GetTopMerchants(context.Context, *connect.Request[v1.GetTopMerchantsRequest]) (*connect.Response[v1.GetTopMerchantsResponse], error)
	GetAccountSummary(context.Context, *connect.Request[v1.GetAccountSummaryRequest]) (*connect.Response[v1.GetAccountSummaryResponse], error)
	GetAccountBalances(context.Context, *connect.Request[v1.GetAccountBalancesRequest]) (*connect.Response[v1.GetAccountBalancesResponse], error)
	GetSpendingTrends(context.Context, *connect.Request[v1.GetSpendingTrendsRequest]) (*connect.Response[v1.GetSpendingTrendsResponse], error)
	GetTotalBalance(context.Context, *connect.Request[v1.GetTotalBalanceRequest]) (*connect.Response[v1.GetTotalBalanceResponse], error)
	GetTotalDebt(context.Context, *connect.Request[v1.GetTotalDebtRequest]) (*connect.Response[v1.GetTotalDebtResponse], error)
	GetNetBalance(context.Context, *connect.Request[v1.GetNetBalanceRequest]) (*connect.Response[v1.GetNetBalanceResponse], error)
	GetCategorySpendingComparison(context.Context, *connect.Request[v1.GetCategorySpendingComparisonRequest]) (*connect.Response[v1.GetCategorySpendingComparisonResponse], error)
}

// NewDashboardServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDashboardServiceHandler(svc DashboardServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dashboardServiceMethods := v1.File_arian_v1_dashboard_services_proto.Services().ByName("DashboardService").Methods()
	dashboardServiceGetDashboardSummaryHandler := connect.NewUnaryHandler(
		DashboardServiceGetDashboardSummaryProcedure,
		svc.GetDashboardSummary,
		connect.WithSchema(dashboardServiceMethods.ByName("GetDashboardSummary")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceGetTrendDataHandler := connect.NewUnaryHandler(
		DashboardServiceGetTrendDataProcedure,
		svc.GetTrendData,
		connect.WithSchema(dashboardServiceMethods.ByName("GetTrendData")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceGetMonthlyComparisonHandler := connect.NewUnaryHandler(
		DashboardServiceGetMonthlyComparisonProcedure,
		svc.GetMonthlyComparison,
		connect.WithSchema(dashboardServiceMethods.ByName("GetMonthlyComparison")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceGetTopCategoriesHandler := connect.NewUnaryHandler(
		DashboardServiceGetTopCategoriesProcedure,
		svc.GetTopCategories,
		connect.WithSchema(dashboardServiceMethods.ByName("GetTopCategories")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceGetTopMerchantsHandler := connect.NewUnaryHandler(
		DashboardServiceGetTopMerchantsProcedure,
		svc.GetTopMerchants,
		connect.WithSchema(dashboardServiceMethods.ByName("GetTopMerchants")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceGetAccountSummaryHandler := connect.NewUnaryHandler(
		DashboardServiceGetAccountSummaryProcedure,
		svc.GetAccountSummary,
		connect.WithSchema(dashboardServiceMethods.ByName("GetAccountSummary")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceGetAccountBalancesHandler := connect.NewUnaryHandler(
		DashboardServiceGetAccountBalancesProcedure,
		svc.GetAccountBalances,
		connect.WithSchema(dashboardServiceMethods.ByName("GetAccountBalances")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceGetSpendingTrendsHandler := connect.NewUnaryHandler(
		DashboardServiceGetSpendingTrendsProcedure,
		svc.GetSpendingTrends,
		connect.WithSchema(dashboardServiceMethods.ByName("GetSpendingTrends")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceGetTotalBalanceHandler := connect.NewUnaryHandler(
		DashboardServiceGetTotalBalanceProcedure,
		svc.GetTotalBalance,
		connect.WithSchema(dashboardServiceMethods.ByName("GetTotalBalance")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceGetTotalDebtHandler := connect.NewUnaryHandler(
		DashboardServiceGetTotalDebtProcedure,
		svc.GetTotalDebt,
		connect.WithSchema(dashboardServiceMethods.ByName("GetTotalDebt")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceGetNetBalanceHandler := connect.NewUnaryHandler(
		DashboardServiceGetNetBalanceProcedure,
		svc.GetNetBalance,
		connect.WithSchema(dashboardServiceMethods.ByName("GetNetBalance")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceGetCategorySpendingComparisonHandler := connect.NewUnaryHandler(
		DashboardServiceGetCategorySpendingComparisonProcedure,
		svc.GetCategorySpendingComparison,
		connect.WithSchema(dashboardServiceMethods.ByName("GetCategorySpendingComparison")),
		connect.WithHandlerOptions(opts...),
	)
	return "/arian.v1.DashboardService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DashboardServiceGetDashboardSummaryProcedure:
			dashboardServiceGetDashboardSummaryHandler.ServeHTTP(w, r)
		case DashboardServiceGetTrendDataProcedure:
			dashboardServiceGetTrendDataHandler.ServeHTTP(w, r)
		case DashboardServiceGetMonthlyComparisonProcedure:
			dashboardServiceGetMonthlyComparisonHandler.ServeHTTP(w, r)
		case DashboardServiceGetTopCategoriesProcedure:
			dashboardServiceGetTopCategoriesHandler.ServeHTTP(w, r)
		case DashboardServiceGetTopMerchantsProcedure:
			dashboardServiceGetTopMerchantsHandler.ServeHTTP(w, r)
		case DashboardServiceGetAccountSummaryProcedure:
			dashboardServiceGetAccountSummaryHandler.ServeHTTP(w, r)
		case DashboardServiceGetAccountBalancesProcedure:
			dashboardServiceGetAccountBalancesHandler.ServeHTTP(w, r)
		case DashboardServiceGetSpendingTrendsProcedure:
			dashboardServiceGetSpendingTrendsHandler.ServeHTTP(w, r)
		case DashboardServiceGetTotalBalanceProcedure:
			dashboardServiceGetTotalBalanceHandler.ServeHTTP(w, r)
		case DashboardServiceGetTotalDebtProcedure:
			dashboardServiceGetTotalDebtHandler.ServeHTTP(w, r)
		case DashboardServiceGetNetBalanceProcedure:
			dashboardServiceGetNetBalanceHandler.ServeHTTP(w, r)
		case DashboardServiceGetCategorySpendingComparisonProcedure:
			dashboardServiceGetCategorySpendingComparisonHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDashboardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDashboardServiceHandler struct{}

func (UnimplementedDashboardServiceHandler) GetDashboardSummary(context.Context, *connect.Request[v1.GetDashboardSummaryRequest]) (*connect.Response[v1.GetDashboardSummaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.DashboardService.GetDashboardSummary is not implemented"))
}

func (UnimplementedDashboardServiceHandler) GetTrendData(context.Context, *connect.Request[v1.GetTrendDataRequest]) (*connect.Response[v1.GetTrendDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.DashboardService.GetTrendData is not implemented"))
}

func (UnimplementedDashboardServiceHandler) GetMonthlyComparison(context.Context, *connect.Request[v1.GetMonthlyComparisonRequest]) (*connect.Response[v1.GetMonthlyComparisonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.DashboardService.GetMonthlyComparison is not implemented"))
}

func (UnimplementedDashboardServiceHandler) GetTopCategories(context.Context, *connect.Request[v1.GetTopCategoriesRequest]) (*connect.Response[v1.GetTopCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.DashboardService.GetTopCategories is not implemented"))
}

func (UnimplementedDashboardServiceHandler) GetTopMerchants(context.Context, *connect.Request[v1.GetTopMerchantsRequest]) (*connect.Response[v1.GetTopMerchantsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.DashboardService.GetTopMerchants is not implemented"))
}

func (UnimplementedDashboardServiceHandler) GetAccountSummary(context.Context, *connect.Request[v1.GetAccountSummaryRequest]) (*connect.Response[v1.GetAccountSummaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.DashboardService.GetAccountSummary is not implemented"))
}

func (UnimplementedDashboardServiceHandler) GetAccountBalances(context.Context, *connect.Request[v1.GetAccountBalancesRequest]) (*connect.Response[v1.GetAccountBalancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.DashboardService.GetAccountBalances is not implemented"))
}

func (UnimplementedDashboardServiceHandler) GetSpendingTrends(context.Context, *connect.Request[v1.GetSpendingTrendsRequest]) (*connect.Response[v1.GetSpendingTrendsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.DashboardService.GetSpendingTrends is not implemented"))
}

func (UnimplementedDashboardServiceHandler) GetTotalBalance(context.Context, *connect.Request[v1.GetTotalBalanceRequest]) (*connect.Response[v1.GetTotalBalanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.DashboardService.GetTotalBalance is not implemented"))
}

func (UnimplementedDashboardServiceHandler) GetTotalDebt(context.Context, *connect.Request[v1.GetTotalDebtRequest]) (*connect.Response[v1.GetTotalDebtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.DashboardService.GetTotalDebt is not implemented"))
}

func (UnimplementedDashboardServiceHandler) GetNetBalance(context.Context, *connect.Request[v1.GetNetBalanceRequest]) (*connect.Response[v1.GetNetBalanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.DashboardService.GetNetBalance is not implemented"))
}

func (UnimplementedDashboardServiceHandler) GetCategorySpendingComparison(context.Context, *connect.Request[v1.GetCategorySpendingComparisonRequest]) (*connect.Response[v1.GetCategorySpendingComparisonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.DashboardService.GetCategorySpendingComparison is not implemented"))
}
