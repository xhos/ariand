// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: arian/v1/backup_services.proto

package arianv1connect

import (
	v1 "ariand/internal/gen/arian/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BackupServiceName is the fully-qualified name of the BackupService service.
	BackupServiceName = "arian.v1.BackupService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BackupServiceExportBackupProcedure is the fully-qualified name of the BackupService's
	// ExportBackup RPC.
	BackupServiceExportBackupProcedure = "/arian.v1.BackupService/ExportBackup"
	// BackupServiceImportBackupProcedure is the fully-qualified name of the BackupService's
	// ImportBackup RPC.
	BackupServiceImportBackupProcedure = "/arian.v1.BackupService/ImportBackup"
)

// BackupServiceClient is a client for the arian.v1.BackupService service.
type BackupServiceClient interface {
	ExportBackup(context.Context, *connect.Request[v1.ExportBackupRequest]) (*connect.Response[v1.ExportBackupResponse], error)
	ImportBackup(context.Context, *connect.Request[v1.ImportBackupRequest]) (*connect.Response[v1.ImportBackupResponse], error)
}

// NewBackupServiceClient constructs a client for the arian.v1.BackupService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBackupServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BackupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	backupServiceMethods := v1.File_arian_v1_backup_services_proto.Services().ByName("BackupService").Methods()
	return &backupServiceClient{
		exportBackup: connect.NewClient[v1.ExportBackupRequest, v1.ExportBackupResponse](
			httpClient,
			baseURL+BackupServiceExportBackupProcedure,
			connect.WithSchema(backupServiceMethods.ByName("ExportBackup")),
			connect.WithClientOptions(opts...),
		),
		importBackup: connect.NewClient[v1.ImportBackupRequest, v1.ImportBackupResponse](
			httpClient,
			baseURL+BackupServiceImportBackupProcedure,
			connect.WithSchema(backupServiceMethods.ByName("ImportBackup")),
			connect.WithClientOptions(opts...),
		),
	}
}

// backupServiceClient implements BackupServiceClient.
type backupServiceClient struct {
	exportBackup *connect.Client[v1.ExportBackupRequest, v1.ExportBackupResponse]
	importBackup *connect.Client[v1.ImportBackupRequest, v1.ImportBackupResponse]
}

// ExportBackup calls arian.v1.BackupService.ExportBackup.
func (c *backupServiceClient) ExportBackup(ctx context.Context, req *connect.Request[v1.ExportBackupRequest]) (*connect.Response[v1.ExportBackupResponse], error) {
	return c.exportBackup.CallUnary(ctx, req)
}

// ImportBackup calls arian.v1.BackupService.ImportBackup.
func (c *backupServiceClient) ImportBackup(ctx context.Context, req *connect.Request[v1.ImportBackupRequest]) (*connect.Response[v1.ImportBackupResponse], error) {
	return c.importBackup.CallUnary(ctx, req)
}

// BackupServiceHandler is an implementation of the arian.v1.BackupService service.
type BackupServiceHandler interface {
	ExportBackup(context.Context, *connect.Request[v1.ExportBackupRequest]) (*connect.Response[v1.ExportBackupResponse], error)
	ImportBackup(context.Context, *connect.Request[v1.ImportBackupRequest]) (*connect.Response[v1.ImportBackupResponse], error)
}

// NewBackupServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBackupServiceHandler(svc BackupServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	backupServiceMethods := v1.File_arian_v1_backup_services_proto.Services().ByName("BackupService").Methods()
	backupServiceExportBackupHandler := connect.NewUnaryHandler(
		BackupServiceExportBackupProcedure,
		svc.ExportBackup,
		connect.WithSchema(backupServiceMethods.ByName("ExportBackup")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceImportBackupHandler := connect.NewUnaryHandler(
		BackupServiceImportBackupProcedure,
		svc.ImportBackup,
		connect.WithSchema(backupServiceMethods.ByName("ImportBackup")),
		connect.WithHandlerOptions(opts...),
	)
	return "/arian.v1.BackupService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BackupServiceExportBackupProcedure:
			backupServiceExportBackupHandler.ServeHTTP(w, r)
		case BackupServiceImportBackupProcedure:
			backupServiceImportBackupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBackupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBackupServiceHandler struct{}

func (UnimplementedBackupServiceHandler) ExportBackup(context.Context, *connect.Request[v1.ExportBackupRequest]) (*connect.Response[v1.ExportBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.BackupService.ExportBackup is not implemented"))
}

func (UnimplementedBackupServiceHandler) ImportBackup(context.Context, *connect.Request[v1.ImportBackupRequest]) (*connect.Response[v1.ImportBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.BackupService.ImportBackup is not implemented"))
}
