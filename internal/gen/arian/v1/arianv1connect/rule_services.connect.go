// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: arian/v1/rule_services.proto

package arianv1connect

import (
	v1 "ariand/internal/gen/arian/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RuleServiceName is the fully-qualified name of the RuleService service.
	RuleServiceName = "arian.v1.RuleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RuleServiceListRulesProcedure is the fully-qualified name of the RuleService's ListRules RPC.
	RuleServiceListRulesProcedure = "/arian.v1.RuleService/ListRules"
	// RuleServiceGetRuleProcedure is the fully-qualified name of the RuleService's GetRule RPC.
	RuleServiceGetRuleProcedure = "/arian.v1.RuleService/GetRule"
	// RuleServiceCreateRuleProcedure is the fully-qualified name of the RuleService's CreateRule RPC.
	RuleServiceCreateRuleProcedure = "/arian.v1.RuleService/CreateRule"
	// RuleServiceUpdateRuleProcedure is the fully-qualified name of the RuleService's UpdateRule RPC.
	RuleServiceUpdateRuleProcedure = "/arian.v1.RuleService/UpdateRule"
	// RuleServiceDeleteRuleProcedure is the fully-qualified name of the RuleService's DeleteRule RPC.
	RuleServiceDeleteRuleProcedure = "/arian.v1.RuleService/DeleteRule"
)

// RuleServiceClient is a client for the arian.v1.RuleService service.
type RuleServiceClient interface {
	ListRules(context.Context, *connect.Request[v1.ListRulesRequest]) (*connect.Response[v1.ListRulesResponse], error)
	GetRule(context.Context, *connect.Request[v1.GetRuleRequest]) (*connect.Response[v1.GetRuleResponse], error)
	CreateRule(context.Context, *connect.Request[v1.CreateRuleRequest]) (*connect.Response[v1.CreateRuleResponse], error)
	UpdateRule(context.Context, *connect.Request[v1.UpdateRuleRequest]) (*connect.Response[v1.UpdateRuleResponse], error)
	DeleteRule(context.Context, *connect.Request[v1.DeleteRuleRequest]) (*connect.Response[v1.DeleteRuleResponse], error)
}

// NewRuleServiceClient constructs a client for the arian.v1.RuleService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRuleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RuleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	ruleServiceMethods := v1.File_arian_v1_rule_services_proto.Services().ByName("RuleService").Methods()
	return &ruleServiceClient{
		listRules: connect.NewClient[v1.ListRulesRequest, v1.ListRulesResponse](
			httpClient,
			baseURL+RuleServiceListRulesProcedure,
			connect.WithSchema(ruleServiceMethods.ByName("ListRules")),
			connect.WithClientOptions(opts...),
		),
		getRule: connect.NewClient[v1.GetRuleRequest, v1.GetRuleResponse](
			httpClient,
			baseURL+RuleServiceGetRuleProcedure,
			connect.WithSchema(ruleServiceMethods.ByName("GetRule")),
			connect.WithClientOptions(opts...),
		),
		createRule: connect.NewClient[v1.CreateRuleRequest, v1.CreateRuleResponse](
			httpClient,
			baseURL+RuleServiceCreateRuleProcedure,
			connect.WithSchema(ruleServiceMethods.ByName("CreateRule")),
			connect.WithClientOptions(opts...),
		),
		updateRule: connect.NewClient[v1.UpdateRuleRequest, v1.UpdateRuleResponse](
			httpClient,
			baseURL+RuleServiceUpdateRuleProcedure,
			connect.WithSchema(ruleServiceMethods.ByName("UpdateRule")),
			connect.WithClientOptions(opts...),
		),
		deleteRule: connect.NewClient[v1.DeleteRuleRequest, v1.DeleteRuleResponse](
			httpClient,
			baseURL+RuleServiceDeleteRuleProcedure,
			connect.WithSchema(ruleServiceMethods.ByName("DeleteRule")),
			connect.WithClientOptions(opts...),
		),
	}
}

// ruleServiceClient implements RuleServiceClient.
type ruleServiceClient struct {
	listRules  *connect.Client[v1.ListRulesRequest, v1.ListRulesResponse]
	getRule    *connect.Client[v1.GetRuleRequest, v1.GetRuleResponse]
	createRule *connect.Client[v1.CreateRuleRequest, v1.CreateRuleResponse]
	updateRule *connect.Client[v1.UpdateRuleRequest, v1.UpdateRuleResponse]
	deleteRule *connect.Client[v1.DeleteRuleRequest, v1.DeleteRuleResponse]
}

// ListRules calls arian.v1.RuleService.ListRules.
func (c *ruleServiceClient) ListRules(ctx context.Context, req *connect.Request[v1.ListRulesRequest]) (*connect.Response[v1.ListRulesResponse], error) {
	return c.listRules.CallUnary(ctx, req)
}

// GetRule calls arian.v1.RuleService.GetRule.
func (c *ruleServiceClient) GetRule(ctx context.Context, req *connect.Request[v1.GetRuleRequest]) (*connect.Response[v1.GetRuleResponse], error) {
	return c.getRule.CallUnary(ctx, req)
}

// CreateRule calls arian.v1.RuleService.CreateRule.
func (c *ruleServiceClient) CreateRule(ctx context.Context, req *connect.Request[v1.CreateRuleRequest]) (*connect.Response[v1.CreateRuleResponse], error) {
	return c.createRule.CallUnary(ctx, req)
}

// UpdateRule calls arian.v1.RuleService.UpdateRule.
func (c *ruleServiceClient) UpdateRule(ctx context.Context, req *connect.Request[v1.UpdateRuleRequest]) (*connect.Response[v1.UpdateRuleResponse], error) {
	return c.updateRule.CallUnary(ctx, req)
}

// DeleteRule calls arian.v1.RuleService.DeleteRule.
func (c *ruleServiceClient) DeleteRule(ctx context.Context, req *connect.Request[v1.DeleteRuleRequest]) (*connect.Response[v1.DeleteRuleResponse], error) {
	return c.deleteRule.CallUnary(ctx, req)
}

// RuleServiceHandler is an implementation of the arian.v1.RuleService service.
type RuleServiceHandler interface {
	ListRules(context.Context, *connect.Request[v1.ListRulesRequest]) (*connect.Response[v1.ListRulesResponse], error)
	GetRule(context.Context, *connect.Request[v1.GetRuleRequest]) (*connect.Response[v1.GetRuleResponse], error)
	CreateRule(context.Context, *connect.Request[v1.CreateRuleRequest]) (*connect.Response[v1.CreateRuleResponse], error)
	UpdateRule(context.Context, *connect.Request[v1.UpdateRuleRequest]) (*connect.Response[v1.UpdateRuleResponse], error)
	DeleteRule(context.Context, *connect.Request[v1.DeleteRuleRequest]) (*connect.Response[v1.DeleteRuleResponse], error)
}

// NewRuleServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRuleServiceHandler(svc RuleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ruleServiceMethods := v1.File_arian_v1_rule_services_proto.Services().ByName("RuleService").Methods()
	ruleServiceListRulesHandler := connect.NewUnaryHandler(
		RuleServiceListRulesProcedure,
		svc.ListRules,
		connect.WithSchema(ruleServiceMethods.ByName("ListRules")),
		connect.WithHandlerOptions(opts...),
	)
	ruleServiceGetRuleHandler := connect.NewUnaryHandler(
		RuleServiceGetRuleProcedure,
		svc.GetRule,
		connect.WithSchema(ruleServiceMethods.ByName("GetRule")),
		connect.WithHandlerOptions(opts...),
	)
	ruleServiceCreateRuleHandler := connect.NewUnaryHandler(
		RuleServiceCreateRuleProcedure,
		svc.CreateRule,
		connect.WithSchema(ruleServiceMethods.ByName("CreateRule")),
		connect.WithHandlerOptions(opts...),
	)
	ruleServiceUpdateRuleHandler := connect.NewUnaryHandler(
		RuleServiceUpdateRuleProcedure,
		svc.UpdateRule,
		connect.WithSchema(ruleServiceMethods.ByName("UpdateRule")),
		connect.WithHandlerOptions(opts...),
	)
	ruleServiceDeleteRuleHandler := connect.NewUnaryHandler(
		RuleServiceDeleteRuleProcedure,
		svc.DeleteRule,
		connect.WithSchema(ruleServiceMethods.ByName("DeleteRule")),
		connect.WithHandlerOptions(opts...),
	)
	return "/arian.v1.RuleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RuleServiceListRulesProcedure:
			ruleServiceListRulesHandler.ServeHTTP(w, r)
		case RuleServiceGetRuleProcedure:
			ruleServiceGetRuleHandler.ServeHTTP(w, r)
		case RuleServiceCreateRuleProcedure:
			ruleServiceCreateRuleHandler.ServeHTTP(w, r)
		case RuleServiceUpdateRuleProcedure:
			ruleServiceUpdateRuleHandler.ServeHTTP(w, r)
		case RuleServiceDeleteRuleProcedure:
			ruleServiceDeleteRuleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRuleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRuleServiceHandler struct{}

func (UnimplementedRuleServiceHandler) ListRules(context.Context, *connect.Request[v1.ListRulesRequest]) (*connect.Response[v1.ListRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.RuleService.ListRules is not implemented"))
}

func (UnimplementedRuleServiceHandler) GetRule(context.Context, *connect.Request[v1.GetRuleRequest]) (*connect.Response[v1.GetRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.RuleService.GetRule is not implemented"))
}

func (UnimplementedRuleServiceHandler) CreateRule(context.Context, *connect.Request[v1.CreateRuleRequest]) (*connect.Response[v1.CreateRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.RuleService.CreateRule is not implemented"))
}

func (UnimplementedRuleServiceHandler) UpdateRule(context.Context, *connect.Request[v1.UpdateRuleRequest]) (*connect.Response[v1.UpdateRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.RuleService.UpdateRule is not implemented"))
}

func (UnimplementedRuleServiceHandler) DeleteRule(context.Context, *connect.Request[v1.DeleteRuleRequest]) (*connect.Response[v1.DeleteRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.RuleService.DeleteRule is not implemented"))
}
