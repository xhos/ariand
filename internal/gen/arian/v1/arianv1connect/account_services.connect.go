// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: arian/v1/account_services.proto

package arianv1connect

import (
	v1 "ariand/internal/gen/arian/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountServiceName is the fully-qualified name of the AccountService service.
	AccountServiceName = "arian.v1.AccountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountServiceListAccountsProcedure is the fully-qualified name of the AccountService's
	// ListAccounts RPC.
	AccountServiceListAccountsProcedure = "/arian.v1.AccountService/ListAccounts"
	// AccountServiceGetAccountProcedure is the fully-qualified name of the AccountService's GetAccount
	// RPC.
	AccountServiceGetAccountProcedure = "/arian.v1.AccountService/GetAccount"
	// AccountServiceCreateAccountProcedure is the fully-qualified name of the AccountService's
	// CreateAccount RPC.
	AccountServiceCreateAccountProcedure = "/arian.v1.AccountService/CreateAccount"
	// AccountServiceUpdateAccountProcedure is the fully-qualified name of the AccountService's
	// UpdateAccount RPC.
	AccountServiceUpdateAccountProcedure = "/arian.v1.AccountService/UpdateAccount"
	// AccountServiceDeleteAccountProcedure is the fully-qualified name of the AccountService's
	// DeleteAccount RPC.
	AccountServiceDeleteAccountProcedure = "/arian.v1.AccountService/DeleteAccount"
	// AccountServiceSetAccountAnchorProcedure is the fully-qualified name of the AccountService's
	// SetAccountAnchor RPC.
	AccountServiceSetAccountAnchorProcedure = "/arian.v1.AccountService/SetAccountAnchor"
	// AccountServiceGetAccountBalanceProcedure is the fully-qualified name of the AccountService's
	// GetAccountBalance RPC.
	AccountServiceGetAccountBalanceProcedure = "/arian.v1.AccountService/GetAccountBalance"
	// AccountServiceGetAnchorBalanceProcedure is the fully-qualified name of the AccountService's
	// GetAnchorBalance RPC.
	AccountServiceGetAnchorBalanceProcedure = "/arian.v1.AccountService/GetAnchorBalance"
	// AccountServiceGetAccountsCountProcedure is the fully-qualified name of the AccountService's
	// GetAccountsCount RPC.
	AccountServiceGetAccountsCountProcedure = "/arian.v1.AccountService/GetAccountsCount"
	// AccountServiceSyncAccountBalancesProcedure is the fully-qualified name of the AccountService's
	// SyncAccountBalances RPC.
	AccountServiceSyncAccountBalancesProcedure = "/arian.v1.AccountService/SyncAccountBalances"
)

// AccountServiceClient is a client for the arian.v1.AccountService service.
type AccountServiceClient interface {
	ListAccounts(context.Context, *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error)
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error)
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error)
	UpdateAccount(context.Context, *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error)
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	SetAccountAnchor(context.Context, *connect.Request[v1.SetAccountAnchorRequest]) (*connect.Response[v1.SetAccountAnchorResponse], error)
	GetAccountBalance(context.Context, *connect.Request[v1.GetAccountBalanceRequest]) (*connect.Response[v1.GetAccountBalanceResponse], error)
	GetAnchorBalance(context.Context, *connect.Request[v1.GetAnchorBalanceRequest]) (*connect.Response[v1.GetAnchorBalanceResponse], error)
	GetAccountsCount(context.Context, *connect.Request[v1.GetAccountsCountRequest]) (*connect.Response[v1.GetAccountsCountResponse], error)
	SyncAccountBalances(context.Context, *connect.Request[v1.SyncAccountBalancesRequest]) (*connect.Response[v1.SyncAccountBalancesResponse], error)
}

// NewAccountServiceClient constructs a client for the arian.v1.AccountService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	accountServiceMethods := v1.File_arian_v1_account_services_proto.Services().ByName("AccountService").Methods()
	return &accountServiceClient{
		listAccounts: connect.NewClient[v1.ListAccountsRequest, v1.ListAccountsResponse](
			httpClient,
			baseURL+AccountServiceListAccountsProcedure,
			connect.WithSchema(accountServiceMethods.ByName("ListAccounts")),
			connect.WithClientOptions(opts...),
		),
		getAccount: connect.NewClient[v1.GetAccountRequest, v1.GetAccountResponse](
			httpClient,
			baseURL+AccountServiceGetAccountProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GetAccount")),
			connect.WithClientOptions(opts...),
		),
		createAccount: connect.NewClient[v1.CreateAccountRequest, v1.CreateAccountResponse](
			httpClient,
			baseURL+AccountServiceCreateAccountProcedure,
			connect.WithSchema(accountServiceMethods.ByName("CreateAccount")),
			connect.WithClientOptions(opts...),
		),
		updateAccount: connect.NewClient[v1.UpdateAccountRequest, v1.UpdateAccountResponse](
			httpClient,
			baseURL+AccountServiceUpdateAccountProcedure,
			connect.WithSchema(accountServiceMethods.ByName("UpdateAccount")),
			connect.WithClientOptions(opts...),
		),
		deleteAccount: connect.NewClient[v1.DeleteAccountRequest, v1.DeleteAccountResponse](
			httpClient,
			baseURL+AccountServiceDeleteAccountProcedure,
			connect.WithSchema(accountServiceMethods.ByName("DeleteAccount")),
			connect.WithClientOptions(opts...),
		),
		setAccountAnchor: connect.NewClient[v1.SetAccountAnchorRequest, v1.SetAccountAnchorResponse](
			httpClient,
			baseURL+AccountServiceSetAccountAnchorProcedure,
			connect.WithSchema(accountServiceMethods.ByName("SetAccountAnchor")),
			connect.WithClientOptions(opts...),
		),
		getAccountBalance: connect.NewClient[v1.GetAccountBalanceRequest, v1.GetAccountBalanceResponse](
			httpClient,
			baseURL+AccountServiceGetAccountBalanceProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GetAccountBalance")),
			connect.WithClientOptions(opts...),
		),
		getAnchorBalance: connect.NewClient[v1.GetAnchorBalanceRequest, v1.GetAnchorBalanceResponse](
			httpClient,
			baseURL+AccountServiceGetAnchorBalanceProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GetAnchorBalance")),
			connect.WithClientOptions(opts...),
		),
		getAccountsCount: connect.NewClient[v1.GetAccountsCountRequest, v1.GetAccountsCountResponse](
			httpClient,
			baseURL+AccountServiceGetAccountsCountProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GetAccountsCount")),
			connect.WithClientOptions(opts...),
		),
		syncAccountBalances: connect.NewClient[v1.SyncAccountBalancesRequest, v1.SyncAccountBalancesResponse](
			httpClient,
			baseURL+AccountServiceSyncAccountBalancesProcedure,
			connect.WithSchema(accountServiceMethods.ByName("SyncAccountBalances")),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountServiceClient implements AccountServiceClient.
type accountServiceClient struct {
	listAccounts        *connect.Client[v1.ListAccountsRequest, v1.ListAccountsResponse]
	getAccount          *connect.Client[v1.GetAccountRequest, v1.GetAccountResponse]
	createAccount       *connect.Client[v1.CreateAccountRequest, v1.CreateAccountResponse]
	updateAccount       *connect.Client[v1.UpdateAccountRequest, v1.UpdateAccountResponse]
	deleteAccount       *connect.Client[v1.DeleteAccountRequest, v1.DeleteAccountResponse]
	setAccountAnchor    *connect.Client[v1.SetAccountAnchorRequest, v1.SetAccountAnchorResponse]
	getAccountBalance   *connect.Client[v1.GetAccountBalanceRequest, v1.GetAccountBalanceResponse]
	getAnchorBalance    *connect.Client[v1.GetAnchorBalanceRequest, v1.GetAnchorBalanceResponse]
	getAccountsCount    *connect.Client[v1.GetAccountsCountRequest, v1.GetAccountsCountResponse]
	syncAccountBalances *connect.Client[v1.SyncAccountBalancesRequest, v1.SyncAccountBalancesResponse]
}

// ListAccounts calls arian.v1.AccountService.ListAccounts.
func (c *accountServiceClient) ListAccounts(ctx context.Context, req *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error) {
	return c.listAccounts.CallUnary(ctx, req)
}

// GetAccount calls arian.v1.AccountService.GetAccount.
func (c *accountServiceClient) GetAccount(ctx context.Context, req *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// CreateAccount calls arian.v1.AccountService.CreateAccount.
func (c *accountServiceClient) CreateAccount(ctx context.Context, req *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// UpdateAccount calls arian.v1.AccountService.UpdateAccount.
func (c *accountServiceClient) UpdateAccount(ctx context.Context, req *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error) {
	return c.updateAccount.CallUnary(ctx, req)
}

// DeleteAccount calls arian.v1.AccountService.DeleteAccount.
func (c *accountServiceClient) DeleteAccount(ctx context.Context, req *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// SetAccountAnchor calls arian.v1.AccountService.SetAccountAnchor.
func (c *accountServiceClient) SetAccountAnchor(ctx context.Context, req *connect.Request[v1.SetAccountAnchorRequest]) (*connect.Response[v1.SetAccountAnchorResponse], error) {
	return c.setAccountAnchor.CallUnary(ctx, req)
}

// GetAccountBalance calls arian.v1.AccountService.GetAccountBalance.
func (c *accountServiceClient) GetAccountBalance(ctx context.Context, req *connect.Request[v1.GetAccountBalanceRequest]) (*connect.Response[v1.GetAccountBalanceResponse], error) {
	return c.getAccountBalance.CallUnary(ctx, req)
}

// GetAnchorBalance calls arian.v1.AccountService.GetAnchorBalance.
func (c *accountServiceClient) GetAnchorBalance(ctx context.Context, req *connect.Request[v1.GetAnchorBalanceRequest]) (*connect.Response[v1.GetAnchorBalanceResponse], error) {
	return c.getAnchorBalance.CallUnary(ctx, req)
}

// GetAccountsCount calls arian.v1.AccountService.GetAccountsCount.
func (c *accountServiceClient) GetAccountsCount(ctx context.Context, req *connect.Request[v1.GetAccountsCountRequest]) (*connect.Response[v1.GetAccountsCountResponse], error) {
	return c.getAccountsCount.CallUnary(ctx, req)
}

// SyncAccountBalances calls arian.v1.AccountService.SyncAccountBalances.
func (c *accountServiceClient) SyncAccountBalances(ctx context.Context, req *connect.Request[v1.SyncAccountBalancesRequest]) (*connect.Response[v1.SyncAccountBalancesResponse], error) {
	return c.syncAccountBalances.CallUnary(ctx, req)
}

// AccountServiceHandler is an implementation of the arian.v1.AccountService service.
type AccountServiceHandler interface {
	ListAccounts(context.Context, *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error)
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error)
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error)
	UpdateAccount(context.Context, *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error)
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	SetAccountAnchor(context.Context, *connect.Request[v1.SetAccountAnchorRequest]) (*connect.Response[v1.SetAccountAnchorResponse], error)
	GetAccountBalance(context.Context, *connect.Request[v1.GetAccountBalanceRequest]) (*connect.Response[v1.GetAccountBalanceResponse], error)
	GetAnchorBalance(context.Context, *connect.Request[v1.GetAnchorBalanceRequest]) (*connect.Response[v1.GetAnchorBalanceResponse], error)
	GetAccountsCount(context.Context, *connect.Request[v1.GetAccountsCountRequest]) (*connect.Response[v1.GetAccountsCountResponse], error)
	SyncAccountBalances(context.Context, *connect.Request[v1.SyncAccountBalancesRequest]) (*connect.Response[v1.SyncAccountBalancesResponse], error)
}

// NewAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountServiceHandler(svc AccountServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountServiceMethods := v1.File_arian_v1_account_services_proto.Services().ByName("AccountService").Methods()
	accountServiceListAccountsHandler := connect.NewUnaryHandler(
		AccountServiceListAccountsProcedure,
		svc.ListAccounts,
		connect.WithSchema(accountServiceMethods.ByName("ListAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetAccountHandler := connect.NewUnaryHandler(
		AccountServiceGetAccountProcedure,
		svc.GetAccount,
		connect.WithSchema(accountServiceMethods.ByName("GetAccount")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceCreateAccountHandler := connect.NewUnaryHandler(
		AccountServiceCreateAccountProcedure,
		svc.CreateAccount,
		connect.WithSchema(accountServiceMethods.ByName("CreateAccount")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceUpdateAccountHandler := connect.NewUnaryHandler(
		AccountServiceUpdateAccountProcedure,
		svc.UpdateAccount,
		connect.WithSchema(accountServiceMethods.ByName("UpdateAccount")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceDeleteAccountHandler := connect.NewUnaryHandler(
		AccountServiceDeleteAccountProcedure,
		svc.DeleteAccount,
		connect.WithSchema(accountServiceMethods.ByName("DeleteAccount")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceSetAccountAnchorHandler := connect.NewUnaryHandler(
		AccountServiceSetAccountAnchorProcedure,
		svc.SetAccountAnchor,
		connect.WithSchema(accountServiceMethods.ByName("SetAccountAnchor")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetAccountBalanceHandler := connect.NewUnaryHandler(
		AccountServiceGetAccountBalanceProcedure,
		svc.GetAccountBalance,
		connect.WithSchema(accountServiceMethods.ByName("GetAccountBalance")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetAnchorBalanceHandler := connect.NewUnaryHandler(
		AccountServiceGetAnchorBalanceProcedure,
		svc.GetAnchorBalance,
		connect.WithSchema(accountServiceMethods.ByName("GetAnchorBalance")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetAccountsCountHandler := connect.NewUnaryHandler(
		AccountServiceGetAccountsCountProcedure,
		svc.GetAccountsCount,
		connect.WithSchema(accountServiceMethods.ByName("GetAccountsCount")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceSyncAccountBalancesHandler := connect.NewUnaryHandler(
		AccountServiceSyncAccountBalancesProcedure,
		svc.SyncAccountBalances,
		connect.WithSchema(accountServiceMethods.ByName("SyncAccountBalances")),
		connect.WithHandlerOptions(opts...),
	)
	return "/arian.v1.AccountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountServiceListAccountsProcedure:
			accountServiceListAccountsHandler.ServeHTTP(w, r)
		case AccountServiceGetAccountProcedure:
			accountServiceGetAccountHandler.ServeHTTP(w, r)
		case AccountServiceCreateAccountProcedure:
			accountServiceCreateAccountHandler.ServeHTTP(w, r)
		case AccountServiceUpdateAccountProcedure:
			accountServiceUpdateAccountHandler.ServeHTTP(w, r)
		case AccountServiceDeleteAccountProcedure:
			accountServiceDeleteAccountHandler.ServeHTTP(w, r)
		case AccountServiceSetAccountAnchorProcedure:
			accountServiceSetAccountAnchorHandler.ServeHTTP(w, r)
		case AccountServiceGetAccountBalanceProcedure:
			accountServiceGetAccountBalanceHandler.ServeHTTP(w, r)
		case AccountServiceGetAnchorBalanceProcedure:
			accountServiceGetAnchorBalanceHandler.ServeHTTP(w, r)
		case AccountServiceGetAccountsCountProcedure:
			accountServiceGetAccountsCountHandler.ServeHTTP(w, r)
		case AccountServiceSyncAccountBalancesProcedure:
			accountServiceSyncAccountBalancesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountServiceHandler struct{}

func (UnimplementedAccountServiceHandler) ListAccounts(context.Context, *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.AccountService.ListAccounts is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.AccountService.GetAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.AccountService.CreateAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) UpdateAccount(context.Context, *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.AccountService.UpdateAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.AccountService.DeleteAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) SetAccountAnchor(context.Context, *connect.Request[v1.SetAccountAnchorRequest]) (*connect.Response[v1.SetAccountAnchorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.AccountService.SetAccountAnchor is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetAccountBalance(context.Context, *connect.Request[v1.GetAccountBalanceRequest]) (*connect.Response[v1.GetAccountBalanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.AccountService.GetAccountBalance is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetAnchorBalance(context.Context, *connect.Request[v1.GetAnchorBalanceRequest]) (*connect.Response[v1.GetAnchorBalanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.AccountService.GetAnchorBalance is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetAccountsCount(context.Context, *connect.Request[v1.GetAccountsCountRequest]) (*connect.Response[v1.GetAccountsCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.AccountService.GetAccountsCount is not implemented"))
}

func (UnimplementedAccountServiceHandler) SyncAccountBalances(context.Context, *connect.Request[v1.SyncAccountBalancesRequest]) (*connect.Response[v1.SyncAccountBalancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.AccountService.SyncAccountBalances is not implemented"))
}
