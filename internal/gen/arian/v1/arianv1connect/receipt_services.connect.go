// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: arian/v1/receipt_services.proto

package arianv1connect

import (
	v1 "ariand/internal/gen/arian/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReceiptServiceName is the fully-qualified name of the ReceiptService service.
	ReceiptServiceName = "arian.v1.ReceiptService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReceiptServiceListReceiptsProcedure is the fully-qualified name of the ReceiptService's
	// ListReceipts RPC.
	ReceiptServiceListReceiptsProcedure = "/arian.v1.ReceiptService/ListReceipts"
	// ReceiptServiceGetReceiptProcedure is the fully-qualified name of the ReceiptService's GetReceipt
	// RPC.
	ReceiptServiceGetReceiptProcedure = "/arian.v1.ReceiptService/GetReceipt"
	// ReceiptServiceCreateReceiptProcedure is the fully-qualified name of the ReceiptService's
	// CreateReceipt RPC.
	ReceiptServiceCreateReceiptProcedure = "/arian.v1.ReceiptService/CreateReceipt"
	// ReceiptServiceUploadReceiptProcedure is the fully-qualified name of the ReceiptService's
	// UploadReceipt RPC.
	ReceiptServiceUploadReceiptProcedure = "/arian.v1.ReceiptService/UploadReceipt"
	// ReceiptServiceUpdateReceiptProcedure is the fully-qualified name of the ReceiptService's
	// UpdateReceipt RPC.
	ReceiptServiceUpdateReceiptProcedure = "/arian.v1.ReceiptService/UpdateReceipt"
	// ReceiptServiceDeleteReceiptProcedure is the fully-qualified name of the ReceiptService's
	// DeleteReceipt RPC.
	ReceiptServiceDeleteReceiptProcedure = "/arian.v1.ReceiptService/DeleteReceipt"
	// ReceiptServiceParseReceiptProcedure is the fully-qualified name of the ReceiptService's
	// ParseReceipt RPC.
	ReceiptServiceParseReceiptProcedure = "/arian.v1.ReceiptService/ParseReceipt"
	// ReceiptServiceGetReceiptsByTransactionProcedure is the fully-qualified name of the
	// ReceiptService's GetReceiptsByTransaction RPC.
	ReceiptServiceGetReceiptsByTransactionProcedure = "/arian.v1.ReceiptService/GetReceiptsByTransaction"
	// ReceiptServiceSearchReceiptsProcedure is the fully-qualified name of the ReceiptService's
	// SearchReceipts RPC.
	ReceiptServiceSearchReceiptsProcedure = "/arian.v1.ReceiptService/SearchReceipts"
	// ReceiptServiceListReceiptItemsProcedure is the fully-qualified name of the ReceiptService's
	// ListReceiptItems RPC.
	ReceiptServiceListReceiptItemsProcedure = "/arian.v1.ReceiptService/ListReceiptItems"
	// ReceiptServiceGetReceiptItemProcedure is the fully-qualified name of the ReceiptService's
	// GetReceiptItem RPC.
	ReceiptServiceGetReceiptItemProcedure = "/arian.v1.ReceiptService/GetReceiptItem"
	// ReceiptServiceCreateReceiptItemProcedure is the fully-qualified name of the ReceiptService's
	// CreateReceiptItem RPC.
	ReceiptServiceCreateReceiptItemProcedure = "/arian.v1.ReceiptService/CreateReceiptItem"
	// ReceiptServiceUpdateReceiptItemProcedure is the fully-qualified name of the ReceiptService's
	// UpdateReceiptItem RPC.
	ReceiptServiceUpdateReceiptItemProcedure = "/arian.v1.ReceiptService/UpdateReceiptItem"
	// ReceiptServiceDeleteReceiptItemProcedure is the fully-qualified name of the ReceiptService's
	// DeleteReceiptItem RPC.
	ReceiptServiceDeleteReceiptItemProcedure = "/arian.v1.ReceiptService/DeleteReceiptItem"
	// ReceiptServiceBulkCreateReceiptItemsProcedure is the fully-qualified name of the ReceiptService's
	// BulkCreateReceiptItems RPC.
	ReceiptServiceBulkCreateReceiptItemsProcedure = "/arian.v1.ReceiptService/BulkCreateReceiptItems"
	// ReceiptServiceDeleteReceiptItemsByReceiptProcedure is the fully-qualified name of the
	// ReceiptService's DeleteReceiptItemsByReceipt RPC.
	ReceiptServiceDeleteReceiptItemsByReceiptProcedure = "/arian.v1.ReceiptService/DeleteReceiptItemsByReceipt"
	// ReceiptServiceGetUnlinkedReceiptsProcedure is the fully-qualified name of the ReceiptService's
	// GetUnlinkedReceipts RPC.
	ReceiptServiceGetUnlinkedReceiptsProcedure = "/arian.v1.ReceiptService/GetUnlinkedReceipts"
	// ReceiptServiceGetReceiptMatchCandidatesProcedure is the fully-qualified name of the
	// ReceiptService's GetReceiptMatchCandidates RPC.
	ReceiptServiceGetReceiptMatchCandidatesProcedure = "/arian.v1.ReceiptService/GetReceiptMatchCandidates"
)

// ReceiptServiceClient is a client for the arian.v1.ReceiptService service.
type ReceiptServiceClient interface {
	ListReceipts(context.Context, *connect.Request[v1.ListReceiptsRequest]) (*connect.Response[v1.ListReceiptsResponse], error)
	GetReceipt(context.Context, *connect.Request[v1.GetReceiptRequest]) (*connect.Response[v1.GetReceiptResponse], error)
	CreateReceipt(context.Context, *connect.Request[v1.CreateReceiptRequest]) (*connect.Response[v1.CreateReceiptResponse], error)
	UploadReceipt(context.Context, *connect.Request[v1.UploadReceiptRequest]) (*connect.Response[v1.UploadReceiptResponse], error)
	UpdateReceipt(context.Context, *connect.Request[v1.UpdateReceiptRequest]) (*connect.Response[v1.UpdateReceiptResponse], error)
	DeleteReceipt(context.Context, *connect.Request[v1.DeleteReceiptRequest]) (*connect.Response[v1.DeleteReceiptResponse], error)
	ParseReceipt(context.Context, *connect.Request[v1.ParseReceiptRequest]) (*connect.Response[v1.ParseReceiptResponse], error)
	GetReceiptsByTransaction(context.Context, *connect.Request[v1.GetReceiptsByTransactionRequest]) (*connect.Response[v1.GetReceiptsByTransactionResponse], error)
	SearchReceipts(context.Context, *connect.Request[v1.SearchReceiptsRequest]) (*connect.Response[v1.SearchReceiptsResponse], error)
	// receipt items management
	ListReceiptItems(context.Context, *connect.Request[v1.ListReceiptItemsRequest]) (*connect.Response[v1.ListReceiptItemsResponse], error)
	GetReceiptItem(context.Context, *connect.Request[v1.GetReceiptItemRequest]) (*connect.Response[v1.GetReceiptItemResponse], error)
	CreateReceiptItem(context.Context, *connect.Request[v1.CreateReceiptItemRequest]) (*connect.Response[v1.CreateReceiptItemResponse], error)
	UpdateReceiptItem(context.Context, *connect.Request[v1.UpdateReceiptItemRequest]) (*connect.Response[v1.UpdateReceiptItemResponse], error)
	DeleteReceiptItem(context.Context, *connect.Request[v1.DeleteReceiptItemRequest]) (*connect.Response[v1.DeleteReceiptItemResponse], error)
	BulkCreateReceiptItems(context.Context, *connect.Request[v1.BulkCreateReceiptItemsRequest]) (*connect.Response[v1.BulkCreateReceiptItemsResponse], error)
	DeleteReceiptItemsByReceipt(context.Context, *connect.Request[v1.DeleteReceiptItemsByReceiptRequest]) (*connect.Response[v1.DeleteReceiptItemsByReceiptResponse], error)
	// utility operations
	GetUnlinkedReceipts(context.Context, *connect.Request[v1.GetUnlinkedReceiptsRequest]) (*connect.Response[v1.GetUnlinkedReceiptsResponse], error)
	GetReceiptMatchCandidates(context.Context, *connect.Request[v1.GetReceiptMatchCandidatesRequest]) (*connect.Response[v1.GetReceiptMatchCandidatesResponse], error)
}

// NewReceiptServiceClient constructs a client for the arian.v1.ReceiptService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReceiptServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReceiptServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	receiptServiceMethods := v1.File_arian_v1_receipt_services_proto.Services().ByName("ReceiptService").Methods()
	return &receiptServiceClient{
		listReceipts: connect.NewClient[v1.ListReceiptsRequest, v1.ListReceiptsResponse](
			httpClient,
			baseURL+ReceiptServiceListReceiptsProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("ListReceipts")),
			connect.WithClientOptions(opts...),
		),
		getReceipt: connect.NewClient[v1.GetReceiptRequest, v1.GetReceiptResponse](
			httpClient,
			baseURL+ReceiptServiceGetReceiptProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("GetReceipt")),
			connect.WithClientOptions(opts...),
		),
		createReceipt: connect.NewClient[v1.CreateReceiptRequest, v1.CreateReceiptResponse](
			httpClient,
			baseURL+ReceiptServiceCreateReceiptProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("CreateReceipt")),
			connect.WithClientOptions(opts...),
		),
		uploadReceipt: connect.NewClient[v1.UploadReceiptRequest, v1.UploadReceiptResponse](
			httpClient,
			baseURL+ReceiptServiceUploadReceiptProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("UploadReceipt")),
			connect.WithClientOptions(opts...),
		),
		updateReceipt: connect.NewClient[v1.UpdateReceiptRequest, v1.UpdateReceiptResponse](
			httpClient,
			baseURL+ReceiptServiceUpdateReceiptProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("UpdateReceipt")),
			connect.WithClientOptions(opts...),
		),
		deleteReceipt: connect.NewClient[v1.DeleteReceiptRequest, v1.DeleteReceiptResponse](
			httpClient,
			baseURL+ReceiptServiceDeleteReceiptProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("DeleteReceipt")),
			connect.WithClientOptions(opts...),
		),
		parseReceipt: connect.NewClient[v1.ParseReceiptRequest, v1.ParseReceiptResponse](
			httpClient,
			baseURL+ReceiptServiceParseReceiptProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("ParseReceipt")),
			connect.WithClientOptions(opts...),
		),
		getReceiptsByTransaction: connect.NewClient[v1.GetReceiptsByTransactionRequest, v1.GetReceiptsByTransactionResponse](
			httpClient,
			baseURL+ReceiptServiceGetReceiptsByTransactionProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("GetReceiptsByTransaction")),
			connect.WithClientOptions(opts...),
		),
		searchReceipts: connect.NewClient[v1.SearchReceiptsRequest, v1.SearchReceiptsResponse](
			httpClient,
			baseURL+ReceiptServiceSearchReceiptsProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("SearchReceipts")),
			connect.WithClientOptions(opts...),
		),
		listReceiptItems: connect.NewClient[v1.ListReceiptItemsRequest, v1.ListReceiptItemsResponse](
			httpClient,
			baseURL+ReceiptServiceListReceiptItemsProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("ListReceiptItems")),
			connect.WithClientOptions(opts...),
		),
		getReceiptItem: connect.NewClient[v1.GetReceiptItemRequest, v1.GetReceiptItemResponse](
			httpClient,
			baseURL+ReceiptServiceGetReceiptItemProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("GetReceiptItem")),
			connect.WithClientOptions(opts...),
		),
		createReceiptItem: connect.NewClient[v1.CreateReceiptItemRequest, v1.CreateReceiptItemResponse](
			httpClient,
			baseURL+ReceiptServiceCreateReceiptItemProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("CreateReceiptItem")),
			connect.WithClientOptions(opts...),
		),
		updateReceiptItem: connect.NewClient[v1.UpdateReceiptItemRequest, v1.UpdateReceiptItemResponse](
			httpClient,
			baseURL+ReceiptServiceUpdateReceiptItemProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("UpdateReceiptItem")),
			connect.WithClientOptions(opts...),
		),
		deleteReceiptItem: connect.NewClient[v1.DeleteReceiptItemRequest, v1.DeleteReceiptItemResponse](
			httpClient,
			baseURL+ReceiptServiceDeleteReceiptItemProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("DeleteReceiptItem")),
			connect.WithClientOptions(opts...),
		),
		bulkCreateReceiptItems: connect.NewClient[v1.BulkCreateReceiptItemsRequest, v1.BulkCreateReceiptItemsResponse](
			httpClient,
			baseURL+ReceiptServiceBulkCreateReceiptItemsProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("BulkCreateReceiptItems")),
			connect.WithClientOptions(opts...),
		),
		deleteReceiptItemsByReceipt: connect.NewClient[v1.DeleteReceiptItemsByReceiptRequest, v1.DeleteReceiptItemsByReceiptResponse](
			httpClient,
			baseURL+ReceiptServiceDeleteReceiptItemsByReceiptProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("DeleteReceiptItemsByReceipt")),
			connect.WithClientOptions(opts...),
		),
		getUnlinkedReceipts: connect.NewClient[v1.GetUnlinkedReceiptsRequest, v1.GetUnlinkedReceiptsResponse](
			httpClient,
			baseURL+ReceiptServiceGetUnlinkedReceiptsProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("GetUnlinkedReceipts")),
			connect.WithClientOptions(opts...),
		),
		getReceiptMatchCandidates: connect.NewClient[v1.GetReceiptMatchCandidatesRequest, v1.GetReceiptMatchCandidatesResponse](
			httpClient,
			baseURL+ReceiptServiceGetReceiptMatchCandidatesProcedure,
			connect.WithSchema(receiptServiceMethods.ByName("GetReceiptMatchCandidates")),
			connect.WithClientOptions(opts...),
		),
	}
}

// receiptServiceClient implements ReceiptServiceClient.
type receiptServiceClient struct {
	listReceipts                *connect.Client[v1.ListReceiptsRequest, v1.ListReceiptsResponse]
	getReceipt                  *connect.Client[v1.GetReceiptRequest, v1.GetReceiptResponse]
	createReceipt               *connect.Client[v1.CreateReceiptRequest, v1.CreateReceiptResponse]
	uploadReceipt               *connect.Client[v1.UploadReceiptRequest, v1.UploadReceiptResponse]
	updateReceipt               *connect.Client[v1.UpdateReceiptRequest, v1.UpdateReceiptResponse]
	deleteReceipt               *connect.Client[v1.DeleteReceiptRequest, v1.DeleteReceiptResponse]
	parseReceipt                *connect.Client[v1.ParseReceiptRequest, v1.ParseReceiptResponse]
	getReceiptsByTransaction    *connect.Client[v1.GetReceiptsByTransactionRequest, v1.GetReceiptsByTransactionResponse]
	searchReceipts              *connect.Client[v1.SearchReceiptsRequest, v1.SearchReceiptsResponse]
	listReceiptItems            *connect.Client[v1.ListReceiptItemsRequest, v1.ListReceiptItemsResponse]
	getReceiptItem              *connect.Client[v1.GetReceiptItemRequest, v1.GetReceiptItemResponse]
	createReceiptItem           *connect.Client[v1.CreateReceiptItemRequest, v1.CreateReceiptItemResponse]
	updateReceiptItem           *connect.Client[v1.UpdateReceiptItemRequest, v1.UpdateReceiptItemResponse]
	deleteReceiptItem           *connect.Client[v1.DeleteReceiptItemRequest, v1.DeleteReceiptItemResponse]
	bulkCreateReceiptItems      *connect.Client[v1.BulkCreateReceiptItemsRequest, v1.BulkCreateReceiptItemsResponse]
	deleteReceiptItemsByReceipt *connect.Client[v1.DeleteReceiptItemsByReceiptRequest, v1.DeleteReceiptItemsByReceiptResponse]
	getUnlinkedReceipts         *connect.Client[v1.GetUnlinkedReceiptsRequest, v1.GetUnlinkedReceiptsResponse]
	getReceiptMatchCandidates   *connect.Client[v1.GetReceiptMatchCandidatesRequest, v1.GetReceiptMatchCandidatesResponse]
}

// ListReceipts calls arian.v1.ReceiptService.ListReceipts.
func (c *receiptServiceClient) ListReceipts(ctx context.Context, req *connect.Request[v1.ListReceiptsRequest]) (*connect.Response[v1.ListReceiptsResponse], error) {
	return c.listReceipts.CallUnary(ctx, req)
}

// GetReceipt calls arian.v1.ReceiptService.GetReceipt.
func (c *receiptServiceClient) GetReceipt(ctx context.Context, req *connect.Request[v1.GetReceiptRequest]) (*connect.Response[v1.GetReceiptResponse], error) {
	return c.getReceipt.CallUnary(ctx, req)
}

// CreateReceipt calls arian.v1.ReceiptService.CreateReceipt.
func (c *receiptServiceClient) CreateReceipt(ctx context.Context, req *connect.Request[v1.CreateReceiptRequest]) (*connect.Response[v1.CreateReceiptResponse], error) {
	return c.createReceipt.CallUnary(ctx, req)
}

// UploadReceipt calls arian.v1.ReceiptService.UploadReceipt.
func (c *receiptServiceClient) UploadReceipt(ctx context.Context, req *connect.Request[v1.UploadReceiptRequest]) (*connect.Response[v1.UploadReceiptResponse], error) {
	return c.uploadReceipt.CallUnary(ctx, req)
}

// UpdateReceipt calls arian.v1.ReceiptService.UpdateReceipt.
func (c *receiptServiceClient) UpdateReceipt(ctx context.Context, req *connect.Request[v1.UpdateReceiptRequest]) (*connect.Response[v1.UpdateReceiptResponse], error) {
	return c.updateReceipt.CallUnary(ctx, req)
}

// DeleteReceipt calls arian.v1.ReceiptService.DeleteReceipt.
func (c *receiptServiceClient) DeleteReceipt(ctx context.Context, req *connect.Request[v1.DeleteReceiptRequest]) (*connect.Response[v1.DeleteReceiptResponse], error) {
	return c.deleteReceipt.CallUnary(ctx, req)
}

// ParseReceipt calls arian.v1.ReceiptService.ParseReceipt.
func (c *receiptServiceClient) ParseReceipt(ctx context.Context, req *connect.Request[v1.ParseReceiptRequest]) (*connect.Response[v1.ParseReceiptResponse], error) {
	return c.parseReceipt.CallUnary(ctx, req)
}

// GetReceiptsByTransaction calls arian.v1.ReceiptService.GetReceiptsByTransaction.
func (c *receiptServiceClient) GetReceiptsByTransaction(ctx context.Context, req *connect.Request[v1.GetReceiptsByTransactionRequest]) (*connect.Response[v1.GetReceiptsByTransactionResponse], error) {
	return c.getReceiptsByTransaction.CallUnary(ctx, req)
}

// SearchReceipts calls arian.v1.ReceiptService.SearchReceipts.
func (c *receiptServiceClient) SearchReceipts(ctx context.Context, req *connect.Request[v1.SearchReceiptsRequest]) (*connect.Response[v1.SearchReceiptsResponse], error) {
	return c.searchReceipts.CallUnary(ctx, req)
}

// ListReceiptItems calls arian.v1.ReceiptService.ListReceiptItems.
func (c *receiptServiceClient) ListReceiptItems(ctx context.Context, req *connect.Request[v1.ListReceiptItemsRequest]) (*connect.Response[v1.ListReceiptItemsResponse], error) {
	return c.listReceiptItems.CallUnary(ctx, req)
}

// GetReceiptItem calls arian.v1.ReceiptService.GetReceiptItem.
func (c *receiptServiceClient) GetReceiptItem(ctx context.Context, req *connect.Request[v1.GetReceiptItemRequest]) (*connect.Response[v1.GetReceiptItemResponse], error) {
	return c.getReceiptItem.CallUnary(ctx, req)
}

// CreateReceiptItem calls arian.v1.ReceiptService.CreateReceiptItem.
func (c *receiptServiceClient) CreateReceiptItem(ctx context.Context, req *connect.Request[v1.CreateReceiptItemRequest]) (*connect.Response[v1.CreateReceiptItemResponse], error) {
	return c.createReceiptItem.CallUnary(ctx, req)
}

// UpdateReceiptItem calls arian.v1.ReceiptService.UpdateReceiptItem.
func (c *receiptServiceClient) UpdateReceiptItem(ctx context.Context, req *connect.Request[v1.UpdateReceiptItemRequest]) (*connect.Response[v1.UpdateReceiptItemResponse], error) {
	return c.updateReceiptItem.CallUnary(ctx, req)
}

// DeleteReceiptItem calls arian.v1.ReceiptService.DeleteReceiptItem.
func (c *receiptServiceClient) DeleteReceiptItem(ctx context.Context, req *connect.Request[v1.DeleteReceiptItemRequest]) (*connect.Response[v1.DeleteReceiptItemResponse], error) {
	return c.deleteReceiptItem.CallUnary(ctx, req)
}

// BulkCreateReceiptItems calls arian.v1.ReceiptService.BulkCreateReceiptItems.
func (c *receiptServiceClient) BulkCreateReceiptItems(ctx context.Context, req *connect.Request[v1.BulkCreateReceiptItemsRequest]) (*connect.Response[v1.BulkCreateReceiptItemsResponse], error) {
	return c.bulkCreateReceiptItems.CallUnary(ctx, req)
}

// DeleteReceiptItemsByReceipt calls arian.v1.ReceiptService.DeleteReceiptItemsByReceipt.
func (c *receiptServiceClient) DeleteReceiptItemsByReceipt(ctx context.Context, req *connect.Request[v1.DeleteReceiptItemsByReceiptRequest]) (*connect.Response[v1.DeleteReceiptItemsByReceiptResponse], error) {
	return c.deleteReceiptItemsByReceipt.CallUnary(ctx, req)
}

// GetUnlinkedReceipts calls arian.v1.ReceiptService.GetUnlinkedReceipts.
func (c *receiptServiceClient) GetUnlinkedReceipts(ctx context.Context, req *connect.Request[v1.GetUnlinkedReceiptsRequest]) (*connect.Response[v1.GetUnlinkedReceiptsResponse], error) {
	return c.getUnlinkedReceipts.CallUnary(ctx, req)
}

// GetReceiptMatchCandidates calls arian.v1.ReceiptService.GetReceiptMatchCandidates.
func (c *receiptServiceClient) GetReceiptMatchCandidates(ctx context.Context, req *connect.Request[v1.GetReceiptMatchCandidatesRequest]) (*connect.Response[v1.GetReceiptMatchCandidatesResponse], error) {
	return c.getReceiptMatchCandidates.CallUnary(ctx, req)
}

// ReceiptServiceHandler is an implementation of the arian.v1.ReceiptService service.
type ReceiptServiceHandler interface {
	ListReceipts(context.Context, *connect.Request[v1.ListReceiptsRequest]) (*connect.Response[v1.ListReceiptsResponse], error)
	GetReceipt(context.Context, *connect.Request[v1.GetReceiptRequest]) (*connect.Response[v1.GetReceiptResponse], error)
	CreateReceipt(context.Context, *connect.Request[v1.CreateReceiptRequest]) (*connect.Response[v1.CreateReceiptResponse], error)
	UploadReceipt(context.Context, *connect.Request[v1.UploadReceiptRequest]) (*connect.Response[v1.UploadReceiptResponse], error)
	UpdateReceipt(context.Context, *connect.Request[v1.UpdateReceiptRequest]) (*connect.Response[v1.UpdateReceiptResponse], error)
	DeleteReceipt(context.Context, *connect.Request[v1.DeleteReceiptRequest]) (*connect.Response[v1.DeleteReceiptResponse], error)
	ParseReceipt(context.Context, *connect.Request[v1.ParseReceiptRequest]) (*connect.Response[v1.ParseReceiptResponse], error)
	GetReceiptsByTransaction(context.Context, *connect.Request[v1.GetReceiptsByTransactionRequest]) (*connect.Response[v1.GetReceiptsByTransactionResponse], error)
	SearchReceipts(context.Context, *connect.Request[v1.SearchReceiptsRequest]) (*connect.Response[v1.SearchReceiptsResponse], error)
	// receipt items management
	ListReceiptItems(context.Context, *connect.Request[v1.ListReceiptItemsRequest]) (*connect.Response[v1.ListReceiptItemsResponse], error)
	GetReceiptItem(context.Context, *connect.Request[v1.GetReceiptItemRequest]) (*connect.Response[v1.GetReceiptItemResponse], error)
	CreateReceiptItem(context.Context, *connect.Request[v1.CreateReceiptItemRequest]) (*connect.Response[v1.CreateReceiptItemResponse], error)
	UpdateReceiptItem(context.Context, *connect.Request[v1.UpdateReceiptItemRequest]) (*connect.Response[v1.UpdateReceiptItemResponse], error)
	DeleteReceiptItem(context.Context, *connect.Request[v1.DeleteReceiptItemRequest]) (*connect.Response[v1.DeleteReceiptItemResponse], error)
	BulkCreateReceiptItems(context.Context, *connect.Request[v1.BulkCreateReceiptItemsRequest]) (*connect.Response[v1.BulkCreateReceiptItemsResponse], error)
	DeleteReceiptItemsByReceipt(context.Context, *connect.Request[v1.DeleteReceiptItemsByReceiptRequest]) (*connect.Response[v1.DeleteReceiptItemsByReceiptResponse], error)
	// utility operations
	GetUnlinkedReceipts(context.Context, *connect.Request[v1.GetUnlinkedReceiptsRequest]) (*connect.Response[v1.GetUnlinkedReceiptsResponse], error)
	GetReceiptMatchCandidates(context.Context, *connect.Request[v1.GetReceiptMatchCandidatesRequest]) (*connect.Response[v1.GetReceiptMatchCandidatesResponse], error)
}

// NewReceiptServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReceiptServiceHandler(svc ReceiptServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	receiptServiceMethods := v1.File_arian_v1_receipt_services_proto.Services().ByName("ReceiptService").Methods()
	receiptServiceListReceiptsHandler := connect.NewUnaryHandler(
		ReceiptServiceListReceiptsProcedure,
		svc.ListReceipts,
		connect.WithSchema(receiptServiceMethods.ByName("ListReceipts")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceGetReceiptHandler := connect.NewUnaryHandler(
		ReceiptServiceGetReceiptProcedure,
		svc.GetReceipt,
		connect.WithSchema(receiptServiceMethods.ByName("GetReceipt")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceCreateReceiptHandler := connect.NewUnaryHandler(
		ReceiptServiceCreateReceiptProcedure,
		svc.CreateReceipt,
		connect.WithSchema(receiptServiceMethods.ByName("CreateReceipt")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceUploadReceiptHandler := connect.NewUnaryHandler(
		ReceiptServiceUploadReceiptProcedure,
		svc.UploadReceipt,
		connect.WithSchema(receiptServiceMethods.ByName("UploadReceipt")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceUpdateReceiptHandler := connect.NewUnaryHandler(
		ReceiptServiceUpdateReceiptProcedure,
		svc.UpdateReceipt,
		connect.WithSchema(receiptServiceMethods.ByName("UpdateReceipt")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceDeleteReceiptHandler := connect.NewUnaryHandler(
		ReceiptServiceDeleteReceiptProcedure,
		svc.DeleteReceipt,
		connect.WithSchema(receiptServiceMethods.ByName("DeleteReceipt")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceParseReceiptHandler := connect.NewUnaryHandler(
		ReceiptServiceParseReceiptProcedure,
		svc.ParseReceipt,
		connect.WithSchema(receiptServiceMethods.ByName("ParseReceipt")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceGetReceiptsByTransactionHandler := connect.NewUnaryHandler(
		ReceiptServiceGetReceiptsByTransactionProcedure,
		svc.GetReceiptsByTransaction,
		connect.WithSchema(receiptServiceMethods.ByName("GetReceiptsByTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceSearchReceiptsHandler := connect.NewUnaryHandler(
		ReceiptServiceSearchReceiptsProcedure,
		svc.SearchReceipts,
		connect.WithSchema(receiptServiceMethods.ByName("SearchReceipts")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceListReceiptItemsHandler := connect.NewUnaryHandler(
		ReceiptServiceListReceiptItemsProcedure,
		svc.ListReceiptItems,
		connect.WithSchema(receiptServiceMethods.ByName("ListReceiptItems")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceGetReceiptItemHandler := connect.NewUnaryHandler(
		ReceiptServiceGetReceiptItemProcedure,
		svc.GetReceiptItem,
		connect.WithSchema(receiptServiceMethods.ByName("GetReceiptItem")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceCreateReceiptItemHandler := connect.NewUnaryHandler(
		ReceiptServiceCreateReceiptItemProcedure,
		svc.CreateReceiptItem,
		connect.WithSchema(receiptServiceMethods.ByName("CreateReceiptItem")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceUpdateReceiptItemHandler := connect.NewUnaryHandler(
		ReceiptServiceUpdateReceiptItemProcedure,
		svc.UpdateReceiptItem,
		connect.WithSchema(receiptServiceMethods.ByName("UpdateReceiptItem")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceDeleteReceiptItemHandler := connect.NewUnaryHandler(
		ReceiptServiceDeleteReceiptItemProcedure,
		svc.DeleteReceiptItem,
		connect.WithSchema(receiptServiceMethods.ByName("DeleteReceiptItem")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceBulkCreateReceiptItemsHandler := connect.NewUnaryHandler(
		ReceiptServiceBulkCreateReceiptItemsProcedure,
		svc.BulkCreateReceiptItems,
		connect.WithSchema(receiptServiceMethods.ByName("BulkCreateReceiptItems")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceDeleteReceiptItemsByReceiptHandler := connect.NewUnaryHandler(
		ReceiptServiceDeleteReceiptItemsByReceiptProcedure,
		svc.DeleteReceiptItemsByReceipt,
		connect.WithSchema(receiptServiceMethods.ByName("DeleteReceiptItemsByReceipt")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceGetUnlinkedReceiptsHandler := connect.NewUnaryHandler(
		ReceiptServiceGetUnlinkedReceiptsProcedure,
		svc.GetUnlinkedReceipts,
		connect.WithSchema(receiptServiceMethods.ByName("GetUnlinkedReceipts")),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceGetReceiptMatchCandidatesHandler := connect.NewUnaryHandler(
		ReceiptServiceGetReceiptMatchCandidatesProcedure,
		svc.GetReceiptMatchCandidates,
		connect.WithSchema(receiptServiceMethods.ByName("GetReceiptMatchCandidates")),
		connect.WithHandlerOptions(opts...),
	)
	return "/arian.v1.ReceiptService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReceiptServiceListReceiptsProcedure:
			receiptServiceListReceiptsHandler.ServeHTTP(w, r)
		case ReceiptServiceGetReceiptProcedure:
			receiptServiceGetReceiptHandler.ServeHTTP(w, r)
		case ReceiptServiceCreateReceiptProcedure:
			receiptServiceCreateReceiptHandler.ServeHTTP(w, r)
		case ReceiptServiceUploadReceiptProcedure:
			receiptServiceUploadReceiptHandler.ServeHTTP(w, r)
		case ReceiptServiceUpdateReceiptProcedure:
			receiptServiceUpdateReceiptHandler.ServeHTTP(w, r)
		case ReceiptServiceDeleteReceiptProcedure:
			receiptServiceDeleteReceiptHandler.ServeHTTP(w, r)
		case ReceiptServiceParseReceiptProcedure:
			receiptServiceParseReceiptHandler.ServeHTTP(w, r)
		case ReceiptServiceGetReceiptsByTransactionProcedure:
			receiptServiceGetReceiptsByTransactionHandler.ServeHTTP(w, r)
		case ReceiptServiceSearchReceiptsProcedure:
			receiptServiceSearchReceiptsHandler.ServeHTTP(w, r)
		case ReceiptServiceListReceiptItemsProcedure:
			receiptServiceListReceiptItemsHandler.ServeHTTP(w, r)
		case ReceiptServiceGetReceiptItemProcedure:
			receiptServiceGetReceiptItemHandler.ServeHTTP(w, r)
		case ReceiptServiceCreateReceiptItemProcedure:
			receiptServiceCreateReceiptItemHandler.ServeHTTP(w, r)
		case ReceiptServiceUpdateReceiptItemProcedure:
			receiptServiceUpdateReceiptItemHandler.ServeHTTP(w, r)
		case ReceiptServiceDeleteReceiptItemProcedure:
			receiptServiceDeleteReceiptItemHandler.ServeHTTP(w, r)
		case ReceiptServiceBulkCreateReceiptItemsProcedure:
			receiptServiceBulkCreateReceiptItemsHandler.ServeHTTP(w, r)
		case ReceiptServiceDeleteReceiptItemsByReceiptProcedure:
			receiptServiceDeleteReceiptItemsByReceiptHandler.ServeHTTP(w, r)
		case ReceiptServiceGetUnlinkedReceiptsProcedure:
			receiptServiceGetUnlinkedReceiptsHandler.ServeHTTP(w, r)
		case ReceiptServiceGetReceiptMatchCandidatesProcedure:
			receiptServiceGetReceiptMatchCandidatesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReceiptServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReceiptServiceHandler struct{}

func (UnimplementedReceiptServiceHandler) ListReceipts(context.Context, *connect.Request[v1.ListReceiptsRequest]) (*connect.Response[v1.ListReceiptsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.ListReceipts is not implemented"))
}

func (UnimplementedReceiptServiceHandler) GetReceipt(context.Context, *connect.Request[v1.GetReceiptRequest]) (*connect.Response[v1.GetReceiptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.GetReceipt is not implemented"))
}

func (UnimplementedReceiptServiceHandler) CreateReceipt(context.Context, *connect.Request[v1.CreateReceiptRequest]) (*connect.Response[v1.CreateReceiptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.CreateReceipt is not implemented"))
}

func (UnimplementedReceiptServiceHandler) UploadReceipt(context.Context, *connect.Request[v1.UploadReceiptRequest]) (*connect.Response[v1.UploadReceiptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.UploadReceipt is not implemented"))
}

func (UnimplementedReceiptServiceHandler) UpdateReceipt(context.Context, *connect.Request[v1.UpdateReceiptRequest]) (*connect.Response[v1.UpdateReceiptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.UpdateReceipt is not implemented"))
}

func (UnimplementedReceiptServiceHandler) DeleteReceipt(context.Context, *connect.Request[v1.DeleteReceiptRequest]) (*connect.Response[v1.DeleteReceiptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.DeleteReceipt is not implemented"))
}

func (UnimplementedReceiptServiceHandler) ParseReceipt(context.Context, *connect.Request[v1.ParseReceiptRequest]) (*connect.Response[v1.ParseReceiptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.ParseReceipt is not implemented"))
}

func (UnimplementedReceiptServiceHandler) GetReceiptsByTransaction(context.Context, *connect.Request[v1.GetReceiptsByTransactionRequest]) (*connect.Response[v1.GetReceiptsByTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.GetReceiptsByTransaction is not implemented"))
}

func (UnimplementedReceiptServiceHandler) SearchReceipts(context.Context, *connect.Request[v1.SearchReceiptsRequest]) (*connect.Response[v1.SearchReceiptsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.SearchReceipts is not implemented"))
}

func (UnimplementedReceiptServiceHandler) ListReceiptItems(context.Context, *connect.Request[v1.ListReceiptItemsRequest]) (*connect.Response[v1.ListReceiptItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.ListReceiptItems is not implemented"))
}

func (UnimplementedReceiptServiceHandler) GetReceiptItem(context.Context, *connect.Request[v1.GetReceiptItemRequest]) (*connect.Response[v1.GetReceiptItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.GetReceiptItem is not implemented"))
}

func (UnimplementedReceiptServiceHandler) CreateReceiptItem(context.Context, *connect.Request[v1.CreateReceiptItemRequest]) (*connect.Response[v1.CreateReceiptItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.CreateReceiptItem is not implemented"))
}

func (UnimplementedReceiptServiceHandler) UpdateReceiptItem(context.Context, *connect.Request[v1.UpdateReceiptItemRequest]) (*connect.Response[v1.UpdateReceiptItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.UpdateReceiptItem is not implemented"))
}

func (UnimplementedReceiptServiceHandler) DeleteReceiptItem(context.Context, *connect.Request[v1.DeleteReceiptItemRequest]) (*connect.Response[v1.DeleteReceiptItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.DeleteReceiptItem is not implemented"))
}

func (UnimplementedReceiptServiceHandler) BulkCreateReceiptItems(context.Context, *connect.Request[v1.BulkCreateReceiptItemsRequest]) (*connect.Response[v1.BulkCreateReceiptItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.BulkCreateReceiptItems is not implemented"))
}

func (UnimplementedReceiptServiceHandler) DeleteReceiptItemsByReceipt(context.Context, *connect.Request[v1.DeleteReceiptItemsByReceiptRequest]) (*connect.Response[v1.DeleteReceiptItemsByReceiptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.DeleteReceiptItemsByReceipt is not implemented"))
}

func (UnimplementedReceiptServiceHandler) GetUnlinkedReceipts(context.Context, *connect.Request[v1.GetUnlinkedReceiptsRequest]) (*connect.Response[v1.GetUnlinkedReceiptsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.GetUnlinkedReceipts is not implemented"))
}

func (UnimplementedReceiptServiceHandler) GetReceiptMatchCandidates(context.Context, *connect.Request[v1.GetReceiptMatchCandidatesRequest]) (*connect.Response[v1.GetReceiptMatchCandidatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptService.GetReceiptMatchCandidates is not implemented"))
}
