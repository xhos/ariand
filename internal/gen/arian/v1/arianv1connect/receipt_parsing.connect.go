// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: arian/v1/receipt_parsing.proto

package arianv1connect

import (
	v1 "ariand/internal/gen/arian/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReceiptParsingServiceName is the fully-qualified name of the ReceiptParsingService service.
	ReceiptParsingServiceName = "arian.v1.ReceiptParsingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReceiptParsingServiceParseImageProcedure is the fully-qualified name of the
	// ReceiptParsingService's ParseImage RPC.
	ReceiptParsingServiceParseImageProcedure = "/arian.v1.ReceiptParsingService/ParseImage"
	// ReceiptParsingServiceGetStatusProcedure is the fully-qualified name of the
	// ReceiptParsingService's GetStatus RPC.
	ReceiptParsingServiceGetStatusProcedure = "/arian.v1.ReceiptParsingService/GetStatus"
)

// ReceiptParsingServiceClient is a client for the arian.v1.ReceiptParsingService service.
type ReceiptParsingServiceClient interface {
	ParseImage(context.Context, *connect.Request[v1.ParseImageRequest]) (*connect.Response[v1.ParseImageResponse], error)
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
}

// NewReceiptParsingServiceClient constructs a client for the arian.v1.ReceiptParsingService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReceiptParsingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReceiptParsingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	receiptParsingServiceMethods := v1.File_arian_v1_receipt_parsing_proto.Services().ByName("ReceiptParsingService").Methods()
	return &receiptParsingServiceClient{
		parseImage: connect.NewClient[v1.ParseImageRequest, v1.ParseImageResponse](
			httpClient,
			baseURL+ReceiptParsingServiceParseImageProcedure,
			connect.WithSchema(receiptParsingServiceMethods.ByName("ParseImage")),
			connect.WithClientOptions(opts...),
		),
		getStatus: connect.NewClient[v1.GetStatusRequest, v1.GetStatusResponse](
			httpClient,
			baseURL+ReceiptParsingServiceGetStatusProcedure,
			connect.WithSchema(receiptParsingServiceMethods.ByName("GetStatus")),
			connect.WithClientOptions(opts...),
		),
	}
}

// receiptParsingServiceClient implements ReceiptParsingServiceClient.
type receiptParsingServiceClient struct {
	parseImage *connect.Client[v1.ParseImageRequest, v1.ParseImageResponse]
	getStatus  *connect.Client[v1.GetStatusRequest, v1.GetStatusResponse]
}

// ParseImage calls arian.v1.ReceiptParsingService.ParseImage.
func (c *receiptParsingServiceClient) ParseImage(ctx context.Context, req *connect.Request[v1.ParseImageRequest]) (*connect.Response[v1.ParseImageResponse], error) {
	return c.parseImage.CallUnary(ctx, req)
}

// GetStatus calls arian.v1.ReceiptParsingService.GetStatus.
func (c *receiptParsingServiceClient) GetStatus(ctx context.Context, req *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// ReceiptParsingServiceHandler is an implementation of the arian.v1.ReceiptParsingService service.
type ReceiptParsingServiceHandler interface {
	ParseImage(context.Context, *connect.Request[v1.ParseImageRequest]) (*connect.Response[v1.ParseImageResponse], error)
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
}

// NewReceiptParsingServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReceiptParsingServiceHandler(svc ReceiptParsingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	receiptParsingServiceMethods := v1.File_arian_v1_receipt_parsing_proto.Services().ByName("ReceiptParsingService").Methods()
	receiptParsingServiceParseImageHandler := connect.NewUnaryHandler(
		ReceiptParsingServiceParseImageProcedure,
		svc.ParseImage,
		connect.WithSchema(receiptParsingServiceMethods.ByName("ParseImage")),
		connect.WithHandlerOptions(opts...),
	)
	receiptParsingServiceGetStatusHandler := connect.NewUnaryHandler(
		ReceiptParsingServiceGetStatusProcedure,
		svc.GetStatus,
		connect.WithSchema(receiptParsingServiceMethods.ByName("GetStatus")),
		connect.WithHandlerOptions(opts...),
	)
	return "/arian.v1.ReceiptParsingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReceiptParsingServiceParseImageProcedure:
			receiptParsingServiceParseImageHandler.ServeHTTP(w, r)
		case ReceiptParsingServiceGetStatusProcedure:
			receiptParsingServiceGetStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReceiptParsingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReceiptParsingServiceHandler struct{}

func (UnimplementedReceiptParsingServiceHandler) ParseImage(context.Context, *connect.Request[v1.ParseImageRequest]) (*connect.Response[v1.ParseImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptParsingService.ParseImage is not implemented"))
}

func (UnimplementedReceiptParsingServiceHandler) GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.ReceiptParsingService.GetStatus is not implemented"))
}
