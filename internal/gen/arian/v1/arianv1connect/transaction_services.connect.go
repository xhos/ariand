// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: arian/v1/transaction_services.proto

package arianv1connect

import (
	v1 "ariand/internal/gen/arian/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TransactionServiceName is the fully-qualified name of the TransactionService service.
	TransactionServiceName = "arian.v1.TransactionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TransactionServiceListTransactionsProcedure is the fully-qualified name of the
	// TransactionService's ListTransactions RPC.
	TransactionServiceListTransactionsProcedure = "/arian.v1.TransactionService/ListTransactions"
	// TransactionServiceGetTransactionProcedure is the fully-qualified name of the TransactionService's
	// GetTransaction RPC.
	TransactionServiceGetTransactionProcedure = "/arian.v1.TransactionService/GetTransaction"
	// TransactionServiceCreateTransactionProcedure is the fully-qualified name of the
	// TransactionService's CreateTransaction RPC.
	TransactionServiceCreateTransactionProcedure = "/arian.v1.TransactionService/CreateTransaction"
	// TransactionServiceUpdateTransactionProcedure is the fully-qualified name of the
	// TransactionService's UpdateTransaction RPC.
	TransactionServiceUpdateTransactionProcedure = "/arian.v1.TransactionService/UpdateTransaction"
	// TransactionServiceDeleteTransactionProcedure is the fully-qualified name of the
	// TransactionService's DeleteTransaction RPC.
	TransactionServiceDeleteTransactionProcedure = "/arian.v1.TransactionService/DeleteTransaction"
	// TransactionServiceBulkDeleteTransactionsProcedure is the fully-qualified name of the
	// TransactionService's BulkDeleteTransactions RPC.
	TransactionServiceBulkDeleteTransactionsProcedure = "/arian.v1.TransactionService/BulkDeleteTransactions"
	// TransactionServiceCategorizeTransactionProcedure is the fully-qualified name of the
	// TransactionService's CategorizeTransaction RPC.
	TransactionServiceCategorizeTransactionProcedure = "/arian.v1.TransactionService/CategorizeTransaction"
	// TransactionServiceSearchTransactionsProcedure is the fully-qualified name of the
	// TransactionService's SearchTransactions RPC.
	TransactionServiceSearchTransactionsProcedure = "/arian.v1.TransactionService/SearchTransactions"
	// TransactionServiceGetTransactionsByAccountProcedure is the fully-qualified name of the
	// TransactionService's GetTransactionsByAccount RPC.
	TransactionServiceGetTransactionsByAccountProcedure = "/arian.v1.TransactionService/GetTransactionsByAccount"
	// TransactionServiceGetUncategorizedTransactionsProcedure is the fully-qualified name of the
	// TransactionService's GetUncategorizedTransactions RPC.
	TransactionServiceGetUncategorizedTransactionsProcedure = "/arian.v1.TransactionService/GetUncategorizedTransactions"
	// TransactionServiceBulkCategorizeTransactionsProcedure is the fully-qualified name of the
	// TransactionService's BulkCategorizeTransactions RPC.
	TransactionServiceBulkCategorizeTransactionsProcedure = "/arian.v1.TransactionService/BulkCategorizeTransactions"
	// TransactionServiceGetTransactionCountByAccountProcedure is the fully-qualified name of the
	// TransactionService's GetTransactionCountByAccount RPC.
	TransactionServiceGetTransactionCountByAccountProcedure = "/arian.v1.TransactionService/GetTransactionCountByAccount"
	// TransactionServiceFindCandidateTransactionsProcedure is the fully-qualified name of the
	// TransactionService's FindCandidateTransactions RPC.
	TransactionServiceFindCandidateTransactionsProcedure = "/arian.v1.TransactionService/FindCandidateTransactions"
	// TransactionServiceIdentifyMerchantProcedure is the fully-qualified name of the
	// TransactionService's IdentifyMerchant RPC.
	TransactionServiceIdentifyMerchantProcedure = "/arian.v1.TransactionService/IdentifyMerchant"
	// TransactionServiceSetTransactionReceiptProcedure is the fully-qualified name of the
	// TransactionService's SetTransactionReceipt RPC.
	TransactionServiceSetTransactionReceiptProcedure = "/arian.v1.TransactionService/SetTransactionReceipt"
)

// TransactionServiceClient is a client for the arian.v1.TransactionService service.
type TransactionServiceClient interface {
	ListTransactions(context.Context, *connect.Request[v1.ListTransactionsRequest]) (*connect.Response[v1.ListTransactionsResponse], error)
	GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error)
	CreateTransaction(context.Context, *connect.Request[v1.CreateTransactionRequest]) (*connect.Response[v1.CreateTransactionResponse], error)
	UpdateTransaction(context.Context, *connect.Request[v1.UpdateTransactionRequest]) (*connect.Response[v1.UpdateTransactionResponse], error)
	DeleteTransaction(context.Context, *connect.Request[v1.DeleteTransactionRequest]) (*connect.Response[v1.DeleteTransactionResponse], error)
	BulkDeleteTransactions(context.Context, *connect.Request[v1.BulkDeleteTransactionsRequest]) (*connect.Response[v1.BulkDeleteTransactionsResponse], error)
	CategorizeTransaction(context.Context, *connect.Request[v1.CategorizeTransactionRequest]) (*connect.Response[v1.CategorizeTransactionResponse], error)
	SearchTransactions(context.Context, *connect.Request[v1.SearchTransactionsRequest]) (*connect.Response[v1.SearchTransactionsResponse], error)
	GetTransactionsByAccount(context.Context, *connect.Request[v1.GetTransactionsByAccountRequest]) (*connect.Response[v1.GetTransactionsByAccountResponse], error)
	GetUncategorizedTransactions(context.Context, *connect.Request[v1.GetUncategorizedTransactionsRequest]) (*connect.Response[v1.GetUncategorizedTransactionsResponse], error)
	BulkCategorizeTransactions(context.Context, *connect.Request[v1.BulkCategorizeTransactionsRequest]) (*connect.Response[v1.BulkCategorizeTransactionsResponse], error)
	GetTransactionCountByAccount(context.Context, *connect.Request[v1.GetTransactionCountByAccountRequest]) (*connect.Response[v1.GetTransactionCountByAccountResponse], error)
	FindCandidateTransactions(context.Context, *connect.Request[v1.FindCandidateTransactionsRequest]) (*connect.Response[v1.FindCandidateTransactionsResponse], error)
	IdentifyMerchant(context.Context, *connect.Request[v1.IdentifyMerchantRequest]) (*connect.Response[v1.IdentifyMerchantResponse], error)
	SetTransactionReceipt(context.Context, *connect.Request[v1.SetTransactionReceiptRequest]) (*connect.Response[v1.SetTransactionReceiptResponse], error)
}

// NewTransactionServiceClient constructs a client for the arian.v1.TransactionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransactionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TransactionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	transactionServiceMethods := v1.File_arian_v1_transaction_services_proto.Services().ByName("TransactionService").Methods()
	return &transactionServiceClient{
		listTransactions: connect.NewClient[v1.ListTransactionsRequest, v1.ListTransactionsResponse](
			httpClient,
			baseURL+TransactionServiceListTransactionsProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("ListTransactions")),
			connect.WithClientOptions(opts...),
		),
		getTransaction: connect.NewClient[v1.GetTransactionRequest, v1.GetTransactionResponse](
			httpClient,
			baseURL+TransactionServiceGetTransactionProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("GetTransaction")),
			connect.WithClientOptions(opts...),
		),
		createTransaction: connect.NewClient[v1.CreateTransactionRequest, v1.CreateTransactionResponse](
			httpClient,
			baseURL+TransactionServiceCreateTransactionProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("CreateTransaction")),
			connect.WithClientOptions(opts...),
		),
		updateTransaction: connect.NewClient[v1.UpdateTransactionRequest, v1.UpdateTransactionResponse](
			httpClient,
			baseURL+TransactionServiceUpdateTransactionProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("UpdateTransaction")),
			connect.WithClientOptions(opts...),
		),
		deleteTransaction: connect.NewClient[v1.DeleteTransactionRequest, v1.DeleteTransactionResponse](
			httpClient,
			baseURL+TransactionServiceDeleteTransactionProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("DeleteTransaction")),
			connect.WithClientOptions(opts...),
		),
		bulkDeleteTransactions: connect.NewClient[v1.BulkDeleteTransactionsRequest, v1.BulkDeleteTransactionsResponse](
			httpClient,
			baseURL+TransactionServiceBulkDeleteTransactionsProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("BulkDeleteTransactions")),
			connect.WithClientOptions(opts...),
		),
		categorizeTransaction: connect.NewClient[v1.CategorizeTransactionRequest, v1.CategorizeTransactionResponse](
			httpClient,
			baseURL+TransactionServiceCategorizeTransactionProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("CategorizeTransaction")),
			connect.WithClientOptions(opts...),
		),
		searchTransactions: connect.NewClient[v1.SearchTransactionsRequest, v1.SearchTransactionsResponse](
			httpClient,
			baseURL+TransactionServiceSearchTransactionsProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("SearchTransactions")),
			connect.WithClientOptions(opts...),
		),
		getTransactionsByAccount: connect.NewClient[v1.GetTransactionsByAccountRequest, v1.GetTransactionsByAccountResponse](
			httpClient,
			baseURL+TransactionServiceGetTransactionsByAccountProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("GetTransactionsByAccount")),
			connect.WithClientOptions(opts...),
		),
		getUncategorizedTransactions: connect.NewClient[v1.GetUncategorizedTransactionsRequest, v1.GetUncategorizedTransactionsResponse](
			httpClient,
			baseURL+TransactionServiceGetUncategorizedTransactionsProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("GetUncategorizedTransactions")),
			connect.WithClientOptions(opts...),
		),
		bulkCategorizeTransactions: connect.NewClient[v1.BulkCategorizeTransactionsRequest, v1.BulkCategorizeTransactionsResponse](
			httpClient,
			baseURL+TransactionServiceBulkCategorizeTransactionsProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("BulkCategorizeTransactions")),
			connect.WithClientOptions(opts...),
		),
		getTransactionCountByAccount: connect.NewClient[v1.GetTransactionCountByAccountRequest, v1.GetTransactionCountByAccountResponse](
			httpClient,
			baseURL+TransactionServiceGetTransactionCountByAccountProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("GetTransactionCountByAccount")),
			connect.WithClientOptions(opts...),
		),
		findCandidateTransactions: connect.NewClient[v1.FindCandidateTransactionsRequest, v1.FindCandidateTransactionsResponse](
			httpClient,
			baseURL+TransactionServiceFindCandidateTransactionsProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("FindCandidateTransactions")),
			connect.WithClientOptions(opts...),
		),
		identifyMerchant: connect.NewClient[v1.IdentifyMerchantRequest, v1.IdentifyMerchantResponse](
			httpClient,
			baseURL+TransactionServiceIdentifyMerchantProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("IdentifyMerchant")),
			connect.WithClientOptions(opts...),
		),
		setTransactionReceipt: connect.NewClient[v1.SetTransactionReceiptRequest, v1.SetTransactionReceiptResponse](
			httpClient,
			baseURL+TransactionServiceSetTransactionReceiptProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("SetTransactionReceipt")),
			connect.WithClientOptions(opts...),
		),
	}
}

// transactionServiceClient implements TransactionServiceClient.
type transactionServiceClient struct {
	listTransactions             *connect.Client[v1.ListTransactionsRequest, v1.ListTransactionsResponse]
	getTransaction               *connect.Client[v1.GetTransactionRequest, v1.GetTransactionResponse]
	createTransaction            *connect.Client[v1.CreateTransactionRequest, v1.CreateTransactionResponse]
	updateTransaction            *connect.Client[v1.UpdateTransactionRequest, v1.UpdateTransactionResponse]
	deleteTransaction            *connect.Client[v1.DeleteTransactionRequest, v1.DeleteTransactionResponse]
	bulkDeleteTransactions       *connect.Client[v1.BulkDeleteTransactionsRequest, v1.BulkDeleteTransactionsResponse]
	categorizeTransaction        *connect.Client[v1.CategorizeTransactionRequest, v1.CategorizeTransactionResponse]
	searchTransactions           *connect.Client[v1.SearchTransactionsRequest, v1.SearchTransactionsResponse]
	getTransactionsByAccount     *connect.Client[v1.GetTransactionsByAccountRequest, v1.GetTransactionsByAccountResponse]
	getUncategorizedTransactions *connect.Client[v1.GetUncategorizedTransactionsRequest, v1.GetUncategorizedTransactionsResponse]
	bulkCategorizeTransactions   *connect.Client[v1.BulkCategorizeTransactionsRequest, v1.BulkCategorizeTransactionsResponse]
	getTransactionCountByAccount *connect.Client[v1.GetTransactionCountByAccountRequest, v1.GetTransactionCountByAccountResponse]
	findCandidateTransactions    *connect.Client[v1.FindCandidateTransactionsRequest, v1.FindCandidateTransactionsResponse]
	identifyMerchant             *connect.Client[v1.IdentifyMerchantRequest, v1.IdentifyMerchantResponse]
	setTransactionReceipt        *connect.Client[v1.SetTransactionReceiptRequest, v1.SetTransactionReceiptResponse]
}

// ListTransactions calls arian.v1.TransactionService.ListTransactions.
func (c *transactionServiceClient) ListTransactions(ctx context.Context, req *connect.Request[v1.ListTransactionsRequest]) (*connect.Response[v1.ListTransactionsResponse], error) {
	return c.listTransactions.CallUnary(ctx, req)
}

// GetTransaction calls arian.v1.TransactionService.GetTransaction.
func (c *transactionServiceClient) GetTransaction(ctx context.Context, req *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error) {
	return c.getTransaction.CallUnary(ctx, req)
}

// CreateTransaction calls arian.v1.TransactionService.CreateTransaction.
func (c *transactionServiceClient) CreateTransaction(ctx context.Context, req *connect.Request[v1.CreateTransactionRequest]) (*connect.Response[v1.CreateTransactionResponse], error) {
	return c.createTransaction.CallUnary(ctx, req)
}

// UpdateTransaction calls arian.v1.TransactionService.UpdateTransaction.
func (c *transactionServiceClient) UpdateTransaction(ctx context.Context, req *connect.Request[v1.UpdateTransactionRequest]) (*connect.Response[v1.UpdateTransactionResponse], error) {
	return c.updateTransaction.CallUnary(ctx, req)
}

// DeleteTransaction calls arian.v1.TransactionService.DeleteTransaction.
func (c *transactionServiceClient) DeleteTransaction(ctx context.Context, req *connect.Request[v1.DeleteTransactionRequest]) (*connect.Response[v1.DeleteTransactionResponse], error) {
	return c.deleteTransaction.CallUnary(ctx, req)
}

// BulkDeleteTransactions calls arian.v1.TransactionService.BulkDeleteTransactions.
func (c *transactionServiceClient) BulkDeleteTransactions(ctx context.Context, req *connect.Request[v1.BulkDeleteTransactionsRequest]) (*connect.Response[v1.BulkDeleteTransactionsResponse], error) {
	return c.bulkDeleteTransactions.CallUnary(ctx, req)
}

// CategorizeTransaction calls arian.v1.TransactionService.CategorizeTransaction.
func (c *transactionServiceClient) CategorizeTransaction(ctx context.Context, req *connect.Request[v1.CategorizeTransactionRequest]) (*connect.Response[v1.CategorizeTransactionResponse], error) {
	return c.categorizeTransaction.CallUnary(ctx, req)
}

// SearchTransactions calls arian.v1.TransactionService.SearchTransactions.
func (c *transactionServiceClient) SearchTransactions(ctx context.Context, req *connect.Request[v1.SearchTransactionsRequest]) (*connect.Response[v1.SearchTransactionsResponse], error) {
	return c.searchTransactions.CallUnary(ctx, req)
}

// GetTransactionsByAccount calls arian.v1.TransactionService.GetTransactionsByAccount.
func (c *transactionServiceClient) GetTransactionsByAccount(ctx context.Context, req *connect.Request[v1.GetTransactionsByAccountRequest]) (*connect.Response[v1.GetTransactionsByAccountResponse], error) {
	return c.getTransactionsByAccount.CallUnary(ctx, req)
}

// GetUncategorizedTransactions calls arian.v1.TransactionService.GetUncategorizedTransactions.
func (c *transactionServiceClient) GetUncategorizedTransactions(ctx context.Context, req *connect.Request[v1.GetUncategorizedTransactionsRequest]) (*connect.Response[v1.GetUncategorizedTransactionsResponse], error) {
	return c.getUncategorizedTransactions.CallUnary(ctx, req)
}

// BulkCategorizeTransactions calls arian.v1.TransactionService.BulkCategorizeTransactions.
func (c *transactionServiceClient) BulkCategorizeTransactions(ctx context.Context, req *connect.Request[v1.BulkCategorizeTransactionsRequest]) (*connect.Response[v1.BulkCategorizeTransactionsResponse], error) {
	return c.bulkCategorizeTransactions.CallUnary(ctx, req)
}

// GetTransactionCountByAccount calls arian.v1.TransactionService.GetTransactionCountByAccount.
func (c *transactionServiceClient) GetTransactionCountByAccount(ctx context.Context, req *connect.Request[v1.GetTransactionCountByAccountRequest]) (*connect.Response[v1.GetTransactionCountByAccountResponse], error) {
	return c.getTransactionCountByAccount.CallUnary(ctx, req)
}

// FindCandidateTransactions calls arian.v1.TransactionService.FindCandidateTransactions.
func (c *transactionServiceClient) FindCandidateTransactions(ctx context.Context, req *connect.Request[v1.FindCandidateTransactionsRequest]) (*connect.Response[v1.FindCandidateTransactionsResponse], error) {
	return c.findCandidateTransactions.CallUnary(ctx, req)
}

// IdentifyMerchant calls arian.v1.TransactionService.IdentifyMerchant.
func (c *transactionServiceClient) IdentifyMerchant(ctx context.Context, req *connect.Request[v1.IdentifyMerchantRequest]) (*connect.Response[v1.IdentifyMerchantResponse], error) {
	return c.identifyMerchant.CallUnary(ctx, req)
}

// SetTransactionReceipt calls arian.v1.TransactionService.SetTransactionReceipt.
func (c *transactionServiceClient) SetTransactionReceipt(ctx context.Context, req *connect.Request[v1.SetTransactionReceiptRequest]) (*connect.Response[v1.SetTransactionReceiptResponse], error) {
	return c.setTransactionReceipt.CallUnary(ctx, req)
}

// TransactionServiceHandler is an implementation of the arian.v1.TransactionService service.
type TransactionServiceHandler interface {
	ListTransactions(context.Context, *connect.Request[v1.ListTransactionsRequest]) (*connect.Response[v1.ListTransactionsResponse], error)
	GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error)
	CreateTransaction(context.Context, *connect.Request[v1.CreateTransactionRequest]) (*connect.Response[v1.CreateTransactionResponse], error)
	UpdateTransaction(context.Context, *connect.Request[v1.UpdateTransactionRequest]) (*connect.Response[v1.UpdateTransactionResponse], error)
	DeleteTransaction(context.Context, *connect.Request[v1.DeleteTransactionRequest]) (*connect.Response[v1.DeleteTransactionResponse], error)
	BulkDeleteTransactions(context.Context, *connect.Request[v1.BulkDeleteTransactionsRequest]) (*connect.Response[v1.BulkDeleteTransactionsResponse], error)
	CategorizeTransaction(context.Context, *connect.Request[v1.CategorizeTransactionRequest]) (*connect.Response[v1.CategorizeTransactionResponse], error)
	SearchTransactions(context.Context, *connect.Request[v1.SearchTransactionsRequest]) (*connect.Response[v1.SearchTransactionsResponse], error)
	GetTransactionsByAccount(context.Context, *connect.Request[v1.GetTransactionsByAccountRequest]) (*connect.Response[v1.GetTransactionsByAccountResponse], error)
	GetUncategorizedTransactions(context.Context, *connect.Request[v1.GetUncategorizedTransactionsRequest]) (*connect.Response[v1.GetUncategorizedTransactionsResponse], error)
	BulkCategorizeTransactions(context.Context, *connect.Request[v1.BulkCategorizeTransactionsRequest]) (*connect.Response[v1.BulkCategorizeTransactionsResponse], error)
	GetTransactionCountByAccount(context.Context, *connect.Request[v1.GetTransactionCountByAccountRequest]) (*connect.Response[v1.GetTransactionCountByAccountResponse], error)
	FindCandidateTransactions(context.Context, *connect.Request[v1.FindCandidateTransactionsRequest]) (*connect.Response[v1.FindCandidateTransactionsResponse], error)
	IdentifyMerchant(context.Context, *connect.Request[v1.IdentifyMerchantRequest]) (*connect.Response[v1.IdentifyMerchantResponse], error)
	SetTransactionReceipt(context.Context, *connect.Request[v1.SetTransactionReceiptRequest]) (*connect.Response[v1.SetTransactionReceiptResponse], error)
}

// NewTransactionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransactionServiceHandler(svc TransactionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	transactionServiceMethods := v1.File_arian_v1_transaction_services_proto.Services().ByName("TransactionService").Methods()
	transactionServiceListTransactionsHandler := connect.NewUnaryHandler(
		TransactionServiceListTransactionsProcedure,
		svc.ListTransactions,
		connect.WithSchema(transactionServiceMethods.ByName("ListTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceGetTransactionHandler := connect.NewUnaryHandler(
		TransactionServiceGetTransactionProcedure,
		svc.GetTransaction,
		connect.WithSchema(transactionServiceMethods.ByName("GetTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceCreateTransactionHandler := connect.NewUnaryHandler(
		TransactionServiceCreateTransactionProcedure,
		svc.CreateTransaction,
		connect.WithSchema(transactionServiceMethods.ByName("CreateTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceUpdateTransactionHandler := connect.NewUnaryHandler(
		TransactionServiceUpdateTransactionProcedure,
		svc.UpdateTransaction,
		connect.WithSchema(transactionServiceMethods.ByName("UpdateTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceDeleteTransactionHandler := connect.NewUnaryHandler(
		TransactionServiceDeleteTransactionProcedure,
		svc.DeleteTransaction,
		connect.WithSchema(transactionServiceMethods.ByName("DeleteTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceBulkDeleteTransactionsHandler := connect.NewUnaryHandler(
		TransactionServiceBulkDeleteTransactionsProcedure,
		svc.BulkDeleteTransactions,
		connect.WithSchema(transactionServiceMethods.ByName("BulkDeleteTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceCategorizeTransactionHandler := connect.NewUnaryHandler(
		TransactionServiceCategorizeTransactionProcedure,
		svc.CategorizeTransaction,
		connect.WithSchema(transactionServiceMethods.ByName("CategorizeTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceSearchTransactionsHandler := connect.NewUnaryHandler(
		TransactionServiceSearchTransactionsProcedure,
		svc.SearchTransactions,
		connect.WithSchema(transactionServiceMethods.ByName("SearchTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceGetTransactionsByAccountHandler := connect.NewUnaryHandler(
		TransactionServiceGetTransactionsByAccountProcedure,
		svc.GetTransactionsByAccount,
		connect.WithSchema(transactionServiceMethods.ByName("GetTransactionsByAccount")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceGetUncategorizedTransactionsHandler := connect.NewUnaryHandler(
		TransactionServiceGetUncategorizedTransactionsProcedure,
		svc.GetUncategorizedTransactions,
		connect.WithSchema(transactionServiceMethods.ByName("GetUncategorizedTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceBulkCategorizeTransactionsHandler := connect.NewUnaryHandler(
		TransactionServiceBulkCategorizeTransactionsProcedure,
		svc.BulkCategorizeTransactions,
		connect.WithSchema(transactionServiceMethods.ByName("BulkCategorizeTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceGetTransactionCountByAccountHandler := connect.NewUnaryHandler(
		TransactionServiceGetTransactionCountByAccountProcedure,
		svc.GetTransactionCountByAccount,
		connect.WithSchema(transactionServiceMethods.ByName("GetTransactionCountByAccount")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceFindCandidateTransactionsHandler := connect.NewUnaryHandler(
		TransactionServiceFindCandidateTransactionsProcedure,
		svc.FindCandidateTransactions,
		connect.WithSchema(transactionServiceMethods.ByName("FindCandidateTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceIdentifyMerchantHandler := connect.NewUnaryHandler(
		TransactionServiceIdentifyMerchantProcedure,
		svc.IdentifyMerchant,
		connect.WithSchema(transactionServiceMethods.ByName("IdentifyMerchant")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceSetTransactionReceiptHandler := connect.NewUnaryHandler(
		TransactionServiceSetTransactionReceiptProcedure,
		svc.SetTransactionReceipt,
		connect.WithSchema(transactionServiceMethods.ByName("SetTransactionReceipt")),
		connect.WithHandlerOptions(opts...),
	)
	return "/arian.v1.TransactionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TransactionServiceListTransactionsProcedure:
			transactionServiceListTransactionsHandler.ServeHTTP(w, r)
		case TransactionServiceGetTransactionProcedure:
			transactionServiceGetTransactionHandler.ServeHTTP(w, r)
		case TransactionServiceCreateTransactionProcedure:
			transactionServiceCreateTransactionHandler.ServeHTTP(w, r)
		case TransactionServiceUpdateTransactionProcedure:
			transactionServiceUpdateTransactionHandler.ServeHTTP(w, r)
		case TransactionServiceDeleteTransactionProcedure:
			transactionServiceDeleteTransactionHandler.ServeHTTP(w, r)
		case TransactionServiceBulkDeleteTransactionsProcedure:
			transactionServiceBulkDeleteTransactionsHandler.ServeHTTP(w, r)
		case TransactionServiceCategorizeTransactionProcedure:
			transactionServiceCategorizeTransactionHandler.ServeHTTP(w, r)
		case TransactionServiceSearchTransactionsProcedure:
			transactionServiceSearchTransactionsHandler.ServeHTTP(w, r)
		case TransactionServiceGetTransactionsByAccountProcedure:
			transactionServiceGetTransactionsByAccountHandler.ServeHTTP(w, r)
		case TransactionServiceGetUncategorizedTransactionsProcedure:
			transactionServiceGetUncategorizedTransactionsHandler.ServeHTTP(w, r)
		case TransactionServiceBulkCategorizeTransactionsProcedure:
			transactionServiceBulkCategorizeTransactionsHandler.ServeHTTP(w, r)
		case TransactionServiceGetTransactionCountByAccountProcedure:
			transactionServiceGetTransactionCountByAccountHandler.ServeHTTP(w, r)
		case TransactionServiceFindCandidateTransactionsProcedure:
			transactionServiceFindCandidateTransactionsHandler.ServeHTTP(w, r)
		case TransactionServiceIdentifyMerchantProcedure:
			transactionServiceIdentifyMerchantHandler.ServeHTTP(w, r)
		case TransactionServiceSetTransactionReceiptProcedure:
			transactionServiceSetTransactionReceiptHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTransactionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTransactionServiceHandler struct{}

func (UnimplementedTransactionServiceHandler) ListTransactions(context.Context, *connect.Request[v1.ListTransactionsRequest]) (*connect.Response[v1.ListTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.TransactionService.ListTransactions is not implemented"))
}

func (UnimplementedTransactionServiceHandler) GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.TransactionService.GetTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) CreateTransaction(context.Context, *connect.Request[v1.CreateTransactionRequest]) (*connect.Response[v1.CreateTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.TransactionService.CreateTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) UpdateTransaction(context.Context, *connect.Request[v1.UpdateTransactionRequest]) (*connect.Response[v1.UpdateTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.TransactionService.UpdateTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) DeleteTransaction(context.Context, *connect.Request[v1.DeleteTransactionRequest]) (*connect.Response[v1.DeleteTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.TransactionService.DeleteTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) BulkDeleteTransactions(context.Context, *connect.Request[v1.BulkDeleteTransactionsRequest]) (*connect.Response[v1.BulkDeleteTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.TransactionService.BulkDeleteTransactions is not implemented"))
}

func (UnimplementedTransactionServiceHandler) CategorizeTransaction(context.Context, *connect.Request[v1.CategorizeTransactionRequest]) (*connect.Response[v1.CategorizeTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.TransactionService.CategorizeTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) SearchTransactions(context.Context, *connect.Request[v1.SearchTransactionsRequest]) (*connect.Response[v1.SearchTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.TransactionService.SearchTransactions is not implemented"))
}

func (UnimplementedTransactionServiceHandler) GetTransactionsByAccount(context.Context, *connect.Request[v1.GetTransactionsByAccountRequest]) (*connect.Response[v1.GetTransactionsByAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.TransactionService.GetTransactionsByAccount is not implemented"))
}

func (UnimplementedTransactionServiceHandler) GetUncategorizedTransactions(context.Context, *connect.Request[v1.GetUncategorizedTransactionsRequest]) (*connect.Response[v1.GetUncategorizedTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.TransactionService.GetUncategorizedTransactions is not implemented"))
}

func (UnimplementedTransactionServiceHandler) BulkCategorizeTransactions(context.Context, *connect.Request[v1.BulkCategorizeTransactionsRequest]) (*connect.Response[v1.BulkCategorizeTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.TransactionService.BulkCategorizeTransactions is not implemented"))
}

func (UnimplementedTransactionServiceHandler) GetTransactionCountByAccount(context.Context, *connect.Request[v1.GetTransactionCountByAccountRequest]) (*connect.Response[v1.GetTransactionCountByAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.TransactionService.GetTransactionCountByAccount is not implemented"))
}

func (UnimplementedTransactionServiceHandler) FindCandidateTransactions(context.Context, *connect.Request[v1.FindCandidateTransactionsRequest]) (*connect.Response[v1.FindCandidateTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.TransactionService.FindCandidateTransactions is not implemented"))
}

func (UnimplementedTransactionServiceHandler) IdentifyMerchant(context.Context, *connect.Request[v1.IdentifyMerchantRequest]) (*connect.Response[v1.IdentifyMerchantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.TransactionService.IdentifyMerchant is not implemented"))
}

func (UnimplementedTransactionServiceHandler) SetTransactionReceipt(context.Context, *connect.Request[v1.SetTransactionReceiptRequest]) (*connect.Response[v1.SetTransactionReceiptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arian.v1.TransactionService.SetTransactionReceipt is not implemented"))
}
