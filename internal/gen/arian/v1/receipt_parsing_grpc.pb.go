// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: arian/v1/receipt_parsing.proto

package arianv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReceiptParsingService_ParseImage_FullMethodName = "/arian.v1.ReceiptParsingService/ParseImage"
	ReceiptParsingService_GetStatus_FullMethodName  = "/arian.v1.ReceiptParsingService/GetStatus"
)

// ReceiptParsingServiceClient is the client API for ReceiptParsingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiptParsingServiceClient interface {
	ParseImage(ctx context.Context, in *ParseImageRequest, opts ...grpc.CallOption) (*ParseImageResponse, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
}

type receiptParsingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiptParsingServiceClient(cc grpc.ClientConnInterface) ReceiptParsingServiceClient {
	return &receiptParsingServiceClient{cc}
}

func (c *receiptParsingServiceClient) ParseImage(ctx context.Context, in *ParseImageRequest, opts ...grpc.CallOption) (*ParseImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseImageResponse)
	err := c.cc.Invoke(ctx, ReceiptParsingService_ParseImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptParsingServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, ReceiptParsingService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiptParsingServiceServer is the server API for ReceiptParsingService service.
// All implementations should embed UnimplementedReceiptParsingServiceServer
// for forward compatibility.
type ReceiptParsingServiceServer interface {
	ParseImage(context.Context, *ParseImageRequest) (*ParseImageResponse, error)
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
}

// UnimplementedReceiptParsingServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReceiptParsingServiceServer struct{}

func (UnimplementedReceiptParsingServiceServer) ParseImage(context.Context, *ParseImageRequest) (*ParseImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseImage not implemented")
}
func (UnimplementedReceiptParsingServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedReceiptParsingServiceServer) testEmbeddedByValue() {}

// UnsafeReceiptParsingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiptParsingServiceServer will
// result in compilation errors.
type UnsafeReceiptParsingServiceServer interface {
	mustEmbedUnimplementedReceiptParsingServiceServer()
}

func RegisterReceiptParsingServiceServer(s grpc.ServiceRegistrar, srv ReceiptParsingServiceServer) {
	// If the following call pancis, it indicates UnimplementedReceiptParsingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReceiptParsingService_ServiceDesc, srv)
}

func _ReceiptParsingService_ParseImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptParsingServiceServer).ParseImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptParsingService_ParseImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptParsingServiceServer).ParseImage(ctx, req.(*ParseImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptParsingService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptParsingServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptParsingService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptParsingServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceiptParsingService_ServiceDesc is the grpc.ServiceDesc for ReceiptParsingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiptParsingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arian.v1.ReceiptParsingService",
	HandlerType: (*ReceiptParsingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseImage",
			Handler:    _ReceiptParsingService_ParseImage_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _ReceiptParsingService_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arian/v1/receipt_parsing.proto",
}
