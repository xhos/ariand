// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: arian/v1/dashboard_services.proto

package arianv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DashboardService_GetDashboardSummary_FullMethodName  = "/arian.v1.DashboardService/GetDashboardSummary"
	DashboardService_GetTrendData_FullMethodName         = "/arian.v1.DashboardService/GetTrendData"
	DashboardService_GetMonthlyComparison_FullMethodName = "/arian.v1.DashboardService/GetMonthlyComparison"
	DashboardService_GetTopCategories_FullMethodName     = "/arian.v1.DashboardService/GetTopCategories"
	DashboardService_GetTopMerchants_FullMethodName      = "/arian.v1.DashboardService/GetTopMerchants"
	DashboardService_GetAccountSummary_FullMethodName    = "/arian.v1.DashboardService/GetAccountSummary"
	DashboardService_GetAccountBalances_FullMethodName   = "/arian.v1.DashboardService/GetAccountBalances"
	DashboardService_GetSpendingTrends_FullMethodName    = "/arian.v1.DashboardService/GetSpendingTrends"
	DashboardService_GetTotalBalance_FullMethodName      = "/arian.v1.DashboardService/GetTotalBalance"
	DashboardService_GetTotalDebt_FullMethodName         = "/arian.v1.DashboardService/GetTotalDebt"
	DashboardService_GetNetBalance_FullMethodName        = "/arian.v1.DashboardService/GetNetBalance"
)

// DashboardServiceClient is the client API for DashboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardServiceClient interface {
	GetDashboardSummary(ctx context.Context, in *GetDashboardSummaryRequest, opts ...grpc.CallOption) (*GetDashboardSummaryResponse, error)
	GetTrendData(ctx context.Context, in *GetTrendDataRequest, opts ...grpc.CallOption) (*GetTrendDataResponse, error)
	GetMonthlyComparison(ctx context.Context, in *GetMonthlyComparisonRequest, opts ...grpc.CallOption) (*GetMonthlyComparisonResponse, error)
	GetTopCategories(ctx context.Context, in *GetTopCategoriesRequest, opts ...grpc.CallOption) (*GetTopCategoriesResponse, error)
	GetTopMerchants(ctx context.Context, in *GetTopMerchantsRequest, opts ...grpc.CallOption) (*GetTopMerchantsResponse, error)
	GetAccountSummary(ctx context.Context, in *GetAccountSummaryRequest, opts ...grpc.CallOption) (*GetAccountSummaryResponse, error)
	GetAccountBalances(ctx context.Context, in *GetAccountBalancesRequest, opts ...grpc.CallOption) (*GetAccountBalancesResponse, error)
	GetSpendingTrends(ctx context.Context, in *GetSpendingTrendsRequest, opts ...grpc.CallOption) (*GetSpendingTrendsResponse, error)
	GetTotalBalance(ctx context.Context, in *GetTotalBalanceRequest, opts ...grpc.CallOption) (*GetTotalBalanceResponse, error)
	GetTotalDebt(ctx context.Context, in *GetTotalDebtRequest, opts ...grpc.CallOption) (*GetTotalDebtResponse, error)
	GetNetBalance(ctx context.Context, in *GetNetBalanceRequest, opts ...grpc.CallOption) (*GetNetBalanceResponse, error)
}

type dashboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardServiceClient(cc grpc.ClientConnInterface) DashboardServiceClient {
	return &dashboardServiceClient{cc}
}

func (c *dashboardServiceClient) GetDashboardSummary(ctx context.Context, in *GetDashboardSummaryRequest, opts ...grpc.CallOption) (*GetDashboardSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDashboardSummaryResponse)
	err := c.cc.Invoke(ctx, DashboardService_GetDashboardSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetTrendData(ctx context.Context, in *GetTrendDataRequest, opts ...grpc.CallOption) (*GetTrendDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrendDataResponse)
	err := c.cc.Invoke(ctx, DashboardService_GetTrendData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetMonthlyComparison(ctx context.Context, in *GetMonthlyComparisonRequest, opts ...grpc.CallOption) (*GetMonthlyComparisonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMonthlyComparisonResponse)
	err := c.cc.Invoke(ctx, DashboardService_GetMonthlyComparison_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetTopCategories(ctx context.Context, in *GetTopCategoriesRequest, opts ...grpc.CallOption) (*GetTopCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopCategoriesResponse)
	err := c.cc.Invoke(ctx, DashboardService_GetTopCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetTopMerchants(ctx context.Context, in *GetTopMerchantsRequest, opts ...grpc.CallOption) (*GetTopMerchantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopMerchantsResponse)
	err := c.cc.Invoke(ctx, DashboardService_GetTopMerchants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetAccountSummary(ctx context.Context, in *GetAccountSummaryRequest, opts ...grpc.CallOption) (*GetAccountSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountSummaryResponse)
	err := c.cc.Invoke(ctx, DashboardService_GetAccountSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetAccountBalances(ctx context.Context, in *GetAccountBalancesRequest, opts ...grpc.CallOption) (*GetAccountBalancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountBalancesResponse)
	err := c.cc.Invoke(ctx, DashboardService_GetAccountBalances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetSpendingTrends(ctx context.Context, in *GetSpendingTrendsRequest, opts ...grpc.CallOption) (*GetSpendingTrendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpendingTrendsResponse)
	err := c.cc.Invoke(ctx, DashboardService_GetSpendingTrends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetTotalBalance(ctx context.Context, in *GetTotalBalanceRequest, opts ...grpc.CallOption) (*GetTotalBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTotalBalanceResponse)
	err := c.cc.Invoke(ctx, DashboardService_GetTotalBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetTotalDebt(ctx context.Context, in *GetTotalDebtRequest, opts ...grpc.CallOption) (*GetTotalDebtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTotalDebtResponse)
	err := c.cc.Invoke(ctx, DashboardService_GetTotalDebt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetNetBalance(ctx context.Context, in *GetNetBalanceRequest, opts ...grpc.CallOption) (*GetNetBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNetBalanceResponse)
	err := c.cc.Invoke(ctx, DashboardService_GetNetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServiceServer is the server API for DashboardService service.
// All implementations should embed UnimplementedDashboardServiceServer
// for forward compatibility.
type DashboardServiceServer interface {
	GetDashboardSummary(context.Context, *GetDashboardSummaryRequest) (*GetDashboardSummaryResponse, error)
	GetTrendData(context.Context, *GetTrendDataRequest) (*GetTrendDataResponse, error)
	GetMonthlyComparison(context.Context, *GetMonthlyComparisonRequest) (*GetMonthlyComparisonResponse, error)
	GetTopCategories(context.Context, *GetTopCategoriesRequest) (*GetTopCategoriesResponse, error)
	GetTopMerchants(context.Context, *GetTopMerchantsRequest) (*GetTopMerchantsResponse, error)
	GetAccountSummary(context.Context, *GetAccountSummaryRequest) (*GetAccountSummaryResponse, error)
	GetAccountBalances(context.Context, *GetAccountBalancesRequest) (*GetAccountBalancesResponse, error)
	GetSpendingTrends(context.Context, *GetSpendingTrendsRequest) (*GetSpendingTrendsResponse, error)
	GetTotalBalance(context.Context, *GetTotalBalanceRequest) (*GetTotalBalanceResponse, error)
	GetTotalDebt(context.Context, *GetTotalDebtRequest) (*GetTotalDebtResponse, error)
	GetNetBalance(context.Context, *GetNetBalanceRequest) (*GetNetBalanceResponse, error)
}

// UnimplementedDashboardServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDashboardServiceServer struct{}

func (UnimplementedDashboardServiceServer) GetDashboardSummary(context.Context, *GetDashboardSummaryRequest) (*GetDashboardSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardSummary not implemented")
}
func (UnimplementedDashboardServiceServer) GetTrendData(context.Context, *GetTrendDataRequest) (*GetTrendDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrendData not implemented")
}
func (UnimplementedDashboardServiceServer) GetMonthlyComparison(context.Context, *GetMonthlyComparisonRequest) (*GetMonthlyComparisonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyComparison not implemented")
}
func (UnimplementedDashboardServiceServer) GetTopCategories(context.Context, *GetTopCategoriesRequest) (*GetTopCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopCategories not implemented")
}
func (UnimplementedDashboardServiceServer) GetTopMerchants(context.Context, *GetTopMerchantsRequest) (*GetTopMerchantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopMerchants not implemented")
}
func (UnimplementedDashboardServiceServer) GetAccountSummary(context.Context, *GetAccountSummaryRequest) (*GetAccountSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountSummary not implemented")
}
func (UnimplementedDashboardServiceServer) GetAccountBalances(context.Context, *GetAccountBalancesRequest) (*GetAccountBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalances not implemented")
}
func (UnimplementedDashboardServiceServer) GetSpendingTrends(context.Context, *GetSpendingTrendsRequest) (*GetSpendingTrendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpendingTrends not implemented")
}
func (UnimplementedDashboardServiceServer) GetTotalBalance(context.Context, *GetTotalBalanceRequest) (*GetTotalBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalBalance not implemented")
}
func (UnimplementedDashboardServiceServer) GetTotalDebt(context.Context, *GetTotalDebtRequest) (*GetTotalDebtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalDebt not implemented")
}
func (UnimplementedDashboardServiceServer) GetNetBalance(context.Context, *GetNetBalanceRequest) (*GetNetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetBalance not implemented")
}
func (UnimplementedDashboardServiceServer) testEmbeddedByValue() {}

// UnsafeDashboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServiceServer will
// result in compilation errors.
type UnsafeDashboardServiceServer interface {
	mustEmbedUnimplementedDashboardServiceServer()
}

func RegisterDashboardServiceServer(s grpc.ServiceRegistrar, srv DashboardServiceServer) {
	// If the following call pancis, it indicates UnimplementedDashboardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DashboardService_ServiceDesc, srv)
}

func _DashboardService_GetDashboardSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDashboardSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetDashboardSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDashboardSummary(ctx, req.(*GetDashboardSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetTrendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrendDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetTrendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetTrendData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetTrendData(ctx, req.(*GetTrendDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetMonthlyComparison_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyComparisonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetMonthlyComparison(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetMonthlyComparison_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetMonthlyComparison(ctx, req.(*GetMonthlyComparisonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetTopCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetTopCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetTopCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetTopCategories(ctx, req.(*GetTopCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetTopMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopMerchantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetTopMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetTopMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetTopMerchants(ctx, req.(*GetTopMerchantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetAccountSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetAccountSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetAccountSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetAccountSummary(ctx, req.(*GetAccountSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetAccountBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetAccountBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetAccountBalances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetAccountBalances(ctx, req.(*GetAccountBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetSpendingTrends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpendingTrendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetSpendingTrends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetSpendingTrends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetSpendingTrends(ctx, req.(*GetSpendingTrendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetTotalBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetTotalBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetTotalBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetTotalBalance(ctx, req.(*GetTotalBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetTotalDebt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalDebtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetTotalDebt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetTotalDebt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetTotalDebt(ctx, req.(*GetTotalDebtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetNetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetNetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetNetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetNetBalance(ctx, req.(*GetNetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DashboardService_ServiceDesc is the grpc.ServiceDesc for DashboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arian.v1.DashboardService",
	HandlerType: (*DashboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDashboardSummary",
			Handler:    _DashboardService_GetDashboardSummary_Handler,
		},
		{
			MethodName: "GetTrendData",
			Handler:    _DashboardService_GetTrendData_Handler,
		},
		{
			MethodName: "GetMonthlyComparison",
			Handler:    _DashboardService_GetMonthlyComparison_Handler,
		},
		{
			MethodName: "GetTopCategories",
			Handler:    _DashboardService_GetTopCategories_Handler,
		},
		{
			MethodName: "GetTopMerchants",
			Handler:    _DashboardService_GetTopMerchants_Handler,
		},
		{
			MethodName: "GetAccountSummary",
			Handler:    _DashboardService_GetAccountSummary_Handler,
		},
		{
			MethodName: "GetAccountBalances",
			Handler:    _DashboardService_GetAccountBalances_Handler,
		},
		{
			MethodName: "GetSpendingTrends",
			Handler:    _DashboardService_GetSpendingTrends_Handler,
		},
		{
			MethodName: "GetTotalBalance",
			Handler:    _DashboardService_GetTotalBalance_Handler,
		},
		{
			MethodName: "GetTotalDebt",
			Handler:    _DashboardService_GetTotalDebt_Handler,
		},
		{
			MethodName: "GetNetBalance",
			Handler:    _DashboardService_GetNetBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arian/v1/dashboard_services.proto",
}
