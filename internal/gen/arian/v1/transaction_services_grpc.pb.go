// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: arian/v1/transaction_services.proto

package arianv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionService_ListTransactions_FullMethodName             = "/arian.v1.TransactionService/ListTransactions"
	TransactionService_GetTransaction_FullMethodName               = "/arian.v1.TransactionService/GetTransaction"
	TransactionService_CreateTransaction_FullMethodName            = "/arian.v1.TransactionService/CreateTransaction"
	TransactionService_UpdateTransaction_FullMethodName            = "/arian.v1.TransactionService/UpdateTransaction"
	TransactionService_DeleteTransaction_FullMethodName            = "/arian.v1.TransactionService/DeleteTransaction"
	TransactionService_BulkDeleteTransactions_FullMethodName       = "/arian.v1.TransactionService/BulkDeleteTransactions"
	TransactionService_CategorizeTransaction_FullMethodName        = "/arian.v1.TransactionService/CategorizeTransaction"
	TransactionService_SearchTransactions_FullMethodName           = "/arian.v1.TransactionService/SearchTransactions"
	TransactionService_GetTransactionsByAccount_FullMethodName     = "/arian.v1.TransactionService/GetTransactionsByAccount"
	TransactionService_GetUncategorizedTransactions_FullMethodName = "/arian.v1.TransactionService/GetUncategorizedTransactions"
	TransactionService_BulkCategorizeTransactions_FullMethodName   = "/arian.v1.TransactionService/BulkCategorizeTransactions"
	TransactionService_GetTransactionCountByAccount_FullMethodName = "/arian.v1.TransactionService/GetTransactionCountByAccount"
	TransactionService_FindCandidateTransactions_FullMethodName    = "/arian.v1.TransactionService/FindCandidateTransactions"
	TransactionService_IdentifyMerchant_FullMethodName             = "/arian.v1.TransactionService/IdentifyMerchant"
	TransactionService_SetTransactionReceipt_FullMethodName        = "/arian.v1.TransactionService/SetTransactionReceipt"
)

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*UpdateTransactionResponse, error)
	DeleteTransaction(ctx context.Context, in *DeleteTransactionRequest, opts ...grpc.CallOption) (*DeleteTransactionResponse, error)
	BulkDeleteTransactions(ctx context.Context, in *BulkDeleteTransactionsRequest, opts ...grpc.CallOption) (*BulkDeleteTransactionsResponse, error)
	CategorizeTransaction(ctx context.Context, in *CategorizeTransactionRequest, opts ...grpc.CallOption) (*CategorizeTransactionResponse, error)
	SearchTransactions(ctx context.Context, in *SearchTransactionsRequest, opts ...grpc.CallOption) (*SearchTransactionsResponse, error)
	GetTransactionsByAccount(ctx context.Context, in *GetTransactionsByAccountRequest, opts ...grpc.CallOption) (*GetTransactionsByAccountResponse, error)
	GetUncategorizedTransactions(ctx context.Context, in *GetUncategorizedTransactionsRequest, opts ...grpc.CallOption) (*GetUncategorizedTransactionsResponse, error)
	BulkCategorizeTransactions(ctx context.Context, in *BulkCategorizeTransactionsRequest, opts ...grpc.CallOption) (*BulkCategorizeTransactionsResponse, error)
	GetTransactionCountByAccount(ctx context.Context, in *GetTransactionCountByAccountRequest, opts ...grpc.CallOption) (*GetTransactionCountByAccountResponse, error)
	FindCandidateTransactions(ctx context.Context, in *FindCandidateTransactionsRequest, opts ...grpc.CallOption) (*FindCandidateTransactionsResponse, error)
	IdentifyMerchant(ctx context.Context, in *IdentifyMerchantRequest, opts ...grpc.CallOption) (*IdentifyMerchantResponse, error)
	SetTransactionReceipt(ctx context.Context, in *SetTransactionReceiptRequest, opts ...grpc.CallOption) (*SetTransactionReceiptResponse, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, TransactionService_ListTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, TransactionService_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*UpdateTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTransactionResponse)
	err := c.cc.Invoke(ctx, TransactionService_UpdateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) DeleteTransaction(ctx context.Context, in *DeleteTransactionRequest, opts ...grpc.CallOption) (*DeleteTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTransactionResponse)
	err := c.cc.Invoke(ctx, TransactionService_DeleteTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) BulkDeleteTransactions(ctx context.Context, in *BulkDeleteTransactionsRequest, opts ...grpc.CallOption) (*BulkDeleteTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkDeleteTransactionsResponse)
	err := c.cc.Invoke(ctx, TransactionService_BulkDeleteTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CategorizeTransaction(ctx context.Context, in *CategorizeTransactionRequest, opts ...grpc.CallOption) (*CategorizeTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategorizeTransactionResponse)
	err := c.cc.Invoke(ctx, TransactionService_CategorizeTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) SearchTransactions(ctx context.Context, in *SearchTransactionsRequest, opts ...grpc.CallOption) (*SearchTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchTransactionsResponse)
	err := c.cc.Invoke(ctx, TransactionService_SearchTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionsByAccount(ctx context.Context, in *GetTransactionsByAccountRequest, opts ...grpc.CallOption) (*GetTransactionsByAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsByAccountResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionsByAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetUncategorizedTransactions(ctx context.Context, in *GetUncategorizedTransactionsRequest, opts ...grpc.CallOption) (*GetUncategorizedTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUncategorizedTransactionsResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetUncategorizedTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) BulkCategorizeTransactions(ctx context.Context, in *BulkCategorizeTransactionsRequest, opts ...grpc.CallOption) (*BulkCategorizeTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCategorizeTransactionsResponse)
	err := c.cc.Invoke(ctx, TransactionService_BulkCategorizeTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionCountByAccount(ctx context.Context, in *GetTransactionCountByAccountRequest, opts ...grpc.CallOption) (*GetTransactionCountByAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionCountByAccountResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionCountByAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindCandidateTransactions(ctx context.Context, in *FindCandidateTransactionsRequest, opts ...grpc.CallOption) (*FindCandidateTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindCandidateTransactionsResponse)
	err := c.cc.Invoke(ctx, TransactionService_FindCandidateTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) IdentifyMerchant(ctx context.Context, in *IdentifyMerchantRequest, opts ...grpc.CallOption) (*IdentifyMerchantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifyMerchantResponse)
	err := c.cc.Invoke(ctx, TransactionService_IdentifyMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) SetTransactionReceipt(ctx context.Context, in *SetTransactionReceiptRequest, opts ...grpc.CallOption) (*SetTransactionReceiptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTransactionReceiptResponse)
	err := c.cc.Invoke(ctx, TransactionService_SetTransactionReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations should embed UnimplementedTransactionServiceServer
// for forward compatibility.
type TransactionServiceServer interface {
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	UpdateTransaction(context.Context, *UpdateTransactionRequest) (*UpdateTransactionResponse, error)
	DeleteTransaction(context.Context, *DeleteTransactionRequest) (*DeleteTransactionResponse, error)
	BulkDeleteTransactions(context.Context, *BulkDeleteTransactionsRequest) (*BulkDeleteTransactionsResponse, error)
	CategorizeTransaction(context.Context, *CategorizeTransactionRequest) (*CategorizeTransactionResponse, error)
	SearchTransactions(context.Context, *SearchTransactionsRequest) (*SearchTransactionsResponse, error)
	GetTransactionsByAccount(context.Context, *GetTransactionsByAccountRequest) (*GetTransactionsByAccountResponse, error)
	GetUncategorizedTransactions(context.Context, *GetUncategorizedTransactionsRequest) (*GetUncategorizedTransactionsResponse, error)
	BulkCategorizeTransactions(context.Context, *BulkCategorizeTransactionsRequest) (*BulkCategorizeTransactionsResponse, error)
	GetTransactionCountByAccount(context.Context, *GetTransactionCountByAccountRequest) (*GetTransactionCountByAccountResponse, error)
	FindCandidateTransactions(context.Context, *FindCandidateTransactionsRequest) (*FindCandidateTransactionsResponse, error)
	IdentifyMerchant(context.Context, *IdentifyMerchantRequest) (*IdentifyMerchantResponse, error)
	SetTransactionReceipt(context.Context, *SetTransactionReceiptRequest) (*SetTransactionReceiptResponse, error)
}

// UnimplementedTransactionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionServiceServer struct{}

func (UnimplementedTransactionServiceServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) UpdateTransaction(context.Context, *UpdateTransactionRequest) (*UpdateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) DeleteTransaction(context.Context, *DeleteTransactionRequest) (*DeleteTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) BulkDeleteTransactions(context.Context, *BulkDeleteTransactionsRequest) (*BulkDeleteTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDeleteTransactions not implemented")
}
func (UnimplementedTransactionServiceServer) CategorizeTransaction(context.Context, *CategorizeTransactionRequest) (*CategorizeTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategorizeTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) SearchTransactions(context.Context, *SearchTransactionsRequest) (*SearchTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTransactions not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionsByAccount(context.Context, *GetTransactionsByAccountRequest) (*GetTransactionsByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsByAccount not implemented")
}
func (UnimplementedTransactionServiceServer) GetUncategorizedTransactions(context.Context, *GetUncategorizedTransactionsRequest) (*GetUncategorizedTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUncategorizedTransactions not implemented")
}
func (UnimplementedTransactionServiceServer) BulkCategorizeTransactions(context.Context, *BulkCategorizeTransactionsRequest) (*BulkCategorizeTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCategorizeTransactions not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionCountByAccount(context.Context, *GetTransactionCountByAccountRequest) (*GetTransactionCountByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionCountByAccount not implemented")
}
func (UnimplementedTransactionServiceServer) FindCandidateTransactions(context.Context, *FindCandidateTransactionsRequest) (*FindCandidateTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCandidateTransactions not implemented")
}
func (UnimplementedTransactionServiceServer) IdentifyMerchant(context.Context, *IdentifyMerchantRequest) (*IdentifyMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentifyMerchant not implemented")
}
func (UnimplementedTransactionServiceServer) SetTransactionReceipt(context.Context, *SetTransactionReceiptRequest) (*SetTransactionReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTransactionReceipt not implemented")
}
func (UnimplementedTransactionServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_ListTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_UpdateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).UpdateTransaction(ctx, req.(*UpdateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_DeleteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).DeleteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_DeleteTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).DeleteTransaction(ctx, req.(*DeleteTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_BulkDeleteTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkDeleteTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).BulkDeleteTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_BulkDeleteTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).BulkDeleteTransactions(ctx, req.(*BulkDeleteTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CategorizeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategorizeTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CategorizeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_CategorizeTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CategorizeTransaction(ctx, req.(*CategorizeTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_SearchTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).SearchTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_SearchTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).SearchTransactions(ctx, req.(*SearchTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionsByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionsByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionsByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionsByAccount(ctx, req.(*GetTransactionsByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetUncategorizedTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUncategorizedTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetUncategorizedTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetUncategorizedTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetUncategorizedTransactions(ctx, req.(*GetUncategorizedTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_BulkCategorizeTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCategorizeTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).BulkCategorizeTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_BulkCategorizeTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).BulkCategorizeTransactions(ctx, req.(*BulkCategorizeTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionCountByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionCountByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionCountByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionCountByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionCountByAccount(ctx, req.(*GetTransactionCountByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindCandidateTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCandidateTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindCandidateTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindCandidateTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindCandidateTransactions(ctx, req.(*FindCandidateTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_IdentifyMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentifyMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).IdentifyMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_IdentifyMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).IdentifyMerchant(ctx, req.(*IdentifyMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_SetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTransactionReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).SetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_SetTransactionReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).SetTransactionReceipt(ctx, req.(*SetTransactionReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arian.v1.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTransactions",
			Handler:    _TransactionService_ListTransactions_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _TransactionService_GetTransaction_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _TransactionService_CreateTransaction_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _TransactionService_UpdateTransaction_Handler,
		},
		{
			MethodName: "DeleteTransaction",
			Handler:    _TransactionService_DeleteTransaction_Handler,
		},
		{
			MethodName: "BulkDeleteTransactions",
			Handler:    _TransactionService_BulkDeleteTransactions_Handler,
		},
		{
			MethodName: "CategorizeTransaction",
			Handler:    _TransactionService_CategorizeTransaction_Handler,
		},
		{
			MethodName: "SearchTransactions",
			Handler:    _TransactionService_SearchTransactions_Handler,
		},
		{
			MethodName: "GetTransactionsByAccount",
			Handler:    _TransactionService_GetTransactionsByAccount_Handler,
		},
		{
			MethodName: "GetUncategorizedTransactions",
			Handler:    _TransactionService_GetUncategorizedTransactions_Handler,
		},
		{
			MethodName: "BulkCategorizeTransactions",
			Handler:    _TransactionService_BulkCategorizeTransactions_Handler,
		},
		{
			MethodName: "GetTransactionCountByAccount",
			Handler:    _TransactionService_GetTransactionCountByAccount_Handler,
		},
		{
			MethodName: "FindCandidateTransactions",
			Handler:    _TransactionService_FindCandidateTransactions_Handler,
		},
		{
			MethodName: "IdentifyMerchant",
			Handler:    _TransactionService_IdentifyMerchant_Handler,
		},
		{
			MethodName: "SetTransactionReceipt",
			Handler:    _TransactionService_SetTransactionReceipt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arian/v1/transaction_services.proto",
}
